generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// All platform users (admins, reviewers, labelers, clients)
model User {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String?
  passwordHash      String
  createdAt         DateTime           @default(now())
  lastLogin         DateTime?
  isActive          Boolean            @default(true)
  updatedAt         DateTime           @updatedAt
  auditLogs         AuditLog[]
  comments          Comment[]
  labels            Label[]
  metrics           Metric[]
  projectsCreated   Project[]          @relation("ProjectCreatedBy")
  reviews           Review[]           @relation("UserReviews")
  academyReviews    AcademyAssignment[] @relation("AcademyReviews")
  assignedTasks     Task[]             @relation("AssignedTasks")
  userOrganizations UserOrganization[]
  userRoles         UserRole[]
  wallet            Wallet?
  academyAssignments AcademyAssignment[]
  analytics         Analytics[]
  reviewAssignments ReviewAssignment[] @relation("UserReviewAssignments")
  payouts           Payout[]           // Relation to Payout model

  @@index([email])
}

/// Companies/clients using the platform
model Organization {
  id                String             @id @default(uuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  billingAccount    BillingAccount?
  projects          Project[]
  userOrganizations UserOrganization[]
  userRoles         UserRole[]
}

/// Many-to-many: users can belong to multiple orgs
model UserOrganization {
  userId         String
  organizationId String
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

/// Canonical roles (admin, reviewer, labeler, billing, owner)
model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

/// Assign roles to users (per org or global)
model UserRole {
  userId         String
  roleId         String
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@unique([userId, roleId, organizationId])
}

/// Fine-grained actions (e.g., "task.assign", "billing.view")
model Permission {
  id              String           @id @default(uuid())
  action          String           @unique
  description     String?
  rolePermissions RolePermission[]
}

/// Map roles to permissions
model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

/// Data labeling projects
model Project {
  id             String       @id @default(uuid())
  organizationId String
  name           String
  description    String?
  status         String?
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  datasets       Dataset[]
  metrics        Metric[]
  analytics      Analytics[]
  createdBy      User         @relation("ProjectCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks          Task[]
  labelStudioProjectId String?

  // --- Added fields for analytics/business logic ---
  budget       Float?    // Optional project budget
  guidelines   String?   // URL or markdown for guidelines
  deadline     DateTime? // Optional project deadline
}

/// Uploaded datasets (files, metadata)
model Dataset {
  id         String   @id @default(uuid())
  projectId  String
  name       String
  storageUrl String
  metadata   Json?
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks      Task[]
}

/// Individual labeling tasks
model Task {
  id           String     @id @default(uuid())
  projectId    String
  datasetId    String
  inputData    Json
  assignedToId String?
  status       TaskStatus @default(InProgress)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  labels       Label[]
  assignedTo   User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  dataset      Dataset    @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewAssignments ReviewAssignment[]

  @@index([projectId])
  @@index([datasetId])
  @@index([assignedToId])
  @@index([status])
}

/// Annotation results for tasks
model Label {
  id          String      @id @default(uuid())
  taskId      String
  userId      String
  data        Json
  status      LabelStatus @default(Draft)
  submittedAt DateTime?
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@index([taskId])
  @@index([userId])
  @@index([status])
}

/// QA reviews of labels
model Review {
  id         String       @id @default(uuid())
  labelId    String
  reviewerId String
  status     ReviewStatus
  comment    String?
  createdAt  DateTime     @default(now())
  label      Label        @relation(fields: [labelId], references: [id], onDelete: Cascade)
  reviewer   User         @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([labelId])
  @@index([reviewerId])
}

/// Threaded comments on labels/reviews
model Comment {
  id        String    @id @default(uuid())
  labelId   String
  userId    String
  content   String
  createdAt DateTime  @default(now())
  parentId  String?
  label     Label     @relation(fields: [labelId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([labelId])
  @@index([userId])
  @@index([parentId])
}

/// Aggregated analytics (per user/project/task)
model Metric {
  id             String   @id @default(uuid())
  projectId      String
  userId         String
  date           DateTime
  approvedRate   Float?
  avgReworkCount Float?
  tasksCompleted Int?
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([date])
}

/// Stripe/Clerk billing info per org
model BillingAccount {
  id               String        @id @default(uuid())
  organizationId   String        @unique
  stripeCustomerId String?
  plan             String?
  seatCount        Int?
  billingStatus    BillingStatus @default(Active)
  createdAt        DateTime      @default(now())
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices         Invoice[]
}

/// Billing records
model Invoice {
  id               String         @id @default(uuid())
  billingAccountId String
  amount           Float
  periodStart      DateTime
  periodEnd        DateTime
  status           InvoiceStatus  @default(Pending)
  stripeInvoiceId  String?
  createdAt        DateTime       @default(now())
  billingAccount   BillingAccount @relation(fields: [billingAccountId], references: [id], onDelete: Cascade)

  @@index([billingAccountId])
  @@index([status])
}

/// Security/audit trail
model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  targetType String
  targetId   String
  timestamp  DateTime @default(now())
  details    Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

/// Contact form submissions
model ContactSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    ContactStatus @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
}

/// User wallets for payments
model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  address   String   @unique
  balance   Float    @default(0)
  status    WalletStatus @default(Active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([address])
}

/// Academy assignments for learning platform
model AcademyAssignment {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  fileUrl     String?
  status      AcademyAssignmentStatus @default(Pending)
  submittedAt DateTime?
  reviewedAt  DateTime?
  reviewerId  String?
  reviewComment String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer    User?    @relation("AcademyReviews", fields: [reviewerId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([reviewerId])
}

/// Analytics data for dashboards
model Analytics {
  id        String   @id @default(uuid())
  userId    String?
  projectId String?
  period    String   // e.g., "30d", "7d", "1d"
  metrics   Json     // Store aggregated metrics
  trends    Json?    // Store trend data
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([period])
  @@index([createdAt])
}

/// Review assignments for tasks
model ReviewAssignment {
  id         String   @id @default(uuid())
  taskId     String
  reviewerId String
  assignedAt DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id])
  reviewer   User     @relation("UserReviewAssignments", fields: [reviewerId], references: [id])

  @@unique([taskId, reviewerId])
  @@index([reviewerId])
}

enum TaskStatus {
  InProgress
  Submitted
  Approved
  Rejected
}

enum LabelStatus {
  Draft
  Submitted
  Approved
  Rejected
}

enum ReviewStatus {
  Approved
  Rejected
}

enum InvoiceStatus {
  Pending
  Paid
  Failed
  Cancelled
}

enum BillingStatus {
  Active
  PastDue
  Cancelled
}

enum ContactStatus {
  Pending
  Responded
  Resolved
  Spam
}

enum WalletStatus {
  Active
  Suspended
  Closed
}

enum AcademyAssignmentStatus {
  Pending
  Submitted
  Approved
  Rejected
}

model Payout {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  status    String    // e.g., 'pending', 'completed'
  method    String    // e.g., 'wallet', 'bank'
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}
