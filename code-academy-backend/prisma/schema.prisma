// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  avatar            String?
  isEmailVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  profile           UserProfile?
  enrollments       Enrollment[]
  progress          Progress[]
  submissions       Submission[]
  collaborations    Collaboration[]
  messages          Message[]
  notifications     Notification[]
  sessions          Session[]
  reviews           Review[]

  @@map("users")
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  bio               String?
  location          String?
  website           String?
  githubUsername    String?
  linkedinUsername  String?
  twitterUsername   String?
  skills            String[]  @default([])
  experienceLevel   ExperienceLevel @default(BEGINNER)
  learningGoals     String[]  @default([])
  timezone          String    @default("UTC")
  language          String    @default("en")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Course Management
model Course {
  id                String    @id @default(cuid())
  title             String
  description       String
  shortDescription  String?
  slug              String    @unique
  thumbnail         String?
  banner            String?
  difficulty        Difficulty @default(BEGINNER)
  duration          Int       // in minutes
  price             Decimal   @default(0)
  isFree            Boolean   @default(false)
  isPublished       Boolean   @default(false)
  isFeatured        Boolean   @default(false)
  tags              String[]  @default([])
  prerequisites     String[]  @default([])
  learningOutcomes  String[]  @default([])
  instructorId      String?
  instructorName    String?
  instructorBio     String?
  instructorAvatar  String?
  rating            Float     @default(0)
  totalRatings      Int       @default(0)
  totalEnrollments  Int       @default(0)
  totalLessons      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  lessons           Lesson[]
  enrollments       Enrollment[]
  progress          Progress[]
  reviews           Review[]
  categories        CourseCategory[]

  @@map("courses")
}

model Lesson {
  id                String    @id @default(cuid())
  courseId          String
  title             String
  description       String?
  content           String?   // Markdown content
  videoUrl          String?
  duration          Int       // in minutes
  order             Int
  isPublished       Boolean   @default(false)
  isFree            Boolean   @default(false)
  lessonType        LessonType @default(THEORY)
  difficulty        Difficulty @default(BEGINNER)
  prerequisites     String[]  @default([])
  resources         Json?     // Additional resources
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  exercises         Exercise[]
  submissions       Submission[]

  @@map("lessons")
}

model Exercise {
  id                String    @id @default(cuid())
  lessonId          String
  title             String
  description       String
  instructions      String
  starterCode       String?
  solution          String?
  testCases         Json?     // Test cases for automated grading
  points            Int       @default(10)
  difficulty        Difficulty @default(BEGINNER)
  timeLimit         Int?      // in minutes
  memoryLimit       Int?      // in MB
  isPublished       Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  lesson            Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions       Submission[]

  @@map("exercises")
}

// Enrollment and Progress
model Enrollment {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  enrolledAt        DateTime  @default(now())
  completedAt       DateTime?
  isActive          Boolean   @default(true)
  progress          Int       @default(0) // Percentage
  lastAccessedAt    DateTime?
  certificateUrl    String?

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id                String    @id @default(cuid())
  userId            String
  courseId          String?
  lessonId          String?
  exerciseId        String?
  progressType      ProgressType
  status            ProgressStatus @default(NOT_STARTED)
  score             Int?
  maxScore          Int?
  timeSpent         Int       @default(0) // in minutes
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("progress")
}

// Submissions and Grading
model Submission {
  id                String    @id @default(cuid())
  userId            String
  exerciseId        String
  lessonId          String?
  code              String
  language          String    @default("javascript")
  status            SubmissionStatus @default(PENDING)
  score             Int?
  maxScore          Int?
  executionTime     Int?      // in milliseconds
  memoryUsed        Int?      // in MB
  testResults       Json?     // Test case results
  feedback          String?
  isPlagiarized     Boolean   @default(false)
  submittedAt       DateTime  @default(now())
  gradedAt          DateTime?

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise          Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  lesson            Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

// AI Assistant and Chat
model ChatSession {
  id                String    @id @default(cuid())
  userId            String
  title             String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  messages          Message[]

  @@map("chat_sessions")
}

model Message {
  id                String    @id @default(cuid())
  sessionId         String
  userId            String
  content           String
  messageType       MessageType @default(TEXT)
  isFromAI          Boolean   @default(false)
  metadata          Json?     // Additional data like code snippets, voice data, etc.
  createdAt         DateTime  @default(now())

  // Relations
  session           ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Collaboration Features
model Collaboration {
  id                String    @id @default(cuid())
  userId            String
  courseId          String?
  lessonId          String?
  exerciseId        String?
  title             String
  description       String?
  code              String?
  language          String    @default("javascript")
  isPublic          Boolean   @default(false)
  isTemplate        Boolean   @default(false)
  tags              String[]  @default([])
  likes             Int       @default(0)
  views             Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collaborations")
}

// Reviews and Ratings
model Review {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  rating            Int       // 1-5 stars
  title             String?
  content           String?
  isVerified        Boolean   @default(false)
  helpfulVotes      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

// Categories and Tags
model Category {
  id                String    @id @default(cuid())
  name              String    @unique
  slug              String    @unique
  description       String?
  color             String?
  icon              String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  courses           CourseCategory[]

  @@map("categories")
}

model CourseCategory {
  id                String    @id @default(cuid())
  courseId          String
  categoryId        String

  // Relations
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([courseId, categoryId])
  @@map("course_categories")
}

// Notifications
model Notification {
  id                String    @id @default(cuid())
  userId            String
  title             String
  message           String
  type              NotificationType @default(INFO)
  isRead            Boolean   @default(false)
  actionUrl         String?
  metadata          Json?
  createdAt         DateTime  @default(now())

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Sessions and Authentication
model Session {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique
  refreshToken      String?   @unique
  expiresAt         DateTime
  isActive          Boolean   @default(true)
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  THEORY
  PRACTICAL
  EXERCISE
  PROJECT
  QUIZ
}

enum ProgressType {
  COURSE
  LESSON
  EXERCISE
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SubmissionStatus {
  PENDING
  RUNNING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILE_ERROR
}

enum MessageType {
  TEXT
  CODE
  VOICE
  IMAGE
  FILE
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACHIEVEMENT
  REMINDER
}
