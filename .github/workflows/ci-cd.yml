name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.8.0'

jobs:
  # Quality Gates
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint || echo "Lint script not found, skipping..."

      - name: Type check
        run: pnpm run typecheck || echo "Typecheck script not found, skipping..."

  # Testing Pipeline
  test:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    strategy:
      matrix:
        test-type: [unit, integration, functional, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run ${{ matrix.test-type }} tests
        run: pnpm run test:${{ matrix.test-type }}
        env:
          CI: true
          BASE_URL: http://localhost:4324

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: pnpm audit --audit-level moderate || echo "Security audit completed with findings"

      - name: Run dependency check
        run: pnpm run audit || echo "Dependency audit script not found"

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean Staging
        run: |
          doctl apps update ${{ secrets.DO_APP_ID_STAGING }} --spec .do/app-staging.yaml
          doctl apps create-deployment ${{ secrets.DO_APP_ID_STAGING }} --force-rebuild

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          doctl apps list-deployments ${{ secrets.DO_APP_ID_STAGING }}

      - name: Run smoke tests
        run: |
          pnpm run test:smoke || echo "Smoke tests not configured"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean Production
        run: |
          doctl apps update ${{ secrets.DO_APP_ID_PRODUCTION }} --spec .do/app-production-fixed.yaml
          doctl apps create-deployment ${{ secrets.DO_APP_ID_PRODUCTION }} --force-rebuild

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 120
          doctl apps list-deployments ${{ secrets.DO_APP_ID_PRODUCTION }}

      - name: Health check
        run: |
          # Add health check endpoint verification
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          # Add Slack/Discord notification here

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback logic here
