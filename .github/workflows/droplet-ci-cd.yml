name: TETRIX Droplet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_rebuild:
        description: 'Force rebuild (skip cache)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.19.2'
  PNPM_VERSION: '10.18.3'
  BUILD_TIMEOUT: '1800' # 30 minutes
  DEPLOY_TIMEOUT: '600'  # 10 minutes
  DROPLET_IP: '207.154.193.187' # Your Droplet's Public IPv4

jobs:
  # Pre-deployment validation
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate package.json
        run: |
          echo "üîç Validating package.json..."
          if [ ! -f package.json ]; then
            echo "‚ùå package.json not found"
            exit 1
          fi
          if ! grep -q '"build"' package.json; then
            echo "‚ùå build script not found in package.json"
            exit 1
          fi
          if ! grep -q '"start"' package.json; then
            echo "‚ùå start script not found in package.json"
            exit 1
          fi
          echo "‚úÖ package.json validation passed"

      - name: Validate Docker Compose file
        run: |
          echo "üîç Validating Docker Compose file..."
          if [ ! -f docker-compose.digitalocean.yml ]; then
            echo "‚ùå docker-compose.digitalocean.yml not found"
            exit 1
          fi
          docker-compose -f docker-compose.digitalocean.yml config || {
            echo "‚ùå Invalid Docker Compose file"
            exit 1
          }
          echo "‚úÖ Docker Compose file validation passed"

  # Build and test with comprehensive error handling
  build-and-test:
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [20.19.2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Clean workspace
        run: |
          echo "üßπ Cleaning workspace..."
          rm -rf dist .astro node_modules/.cache
          rm -f package-lock.json yarn.lock npm-shrinkwrap.json
          echo "‚úÖ Workspace cleaned"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile --prefer-offline
          echo "‚úÖ Dependencies installed"

      - name: Lint code
        run: |
          echo "üîç Running linter..."
          pnpm run lint || {
            echo "‚ö†Ô∏è Lint warnings found, continuing..."
          }

      - name: Type check
        run: |
          echo "üîç Running type check..."
          pnpm run type-check || {
            echo "‚ö†Ô∏è Type check warnings found, continuing..."
          }

      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          pnpm run test:run || {
            echo "‚ö†Ô∏è Some tests failed, but continuing with build..."
          }

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application..."
          timeout ${{ env.BUILD_TIMEOUT }} pnpm run build || {
            echo "‚ùå Build failed, checking for common issues..."
            pnpm run type-check 2>&1 | head -20 || true
            pnpm list --depth=0 2>&1 | head -20 || true
            pnpm run build 2>&1 | head -50 || true
            exit 1
          }
          echo "‚úÖ Build completed successfully"

      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/server/entry.mjs" ]; then
            echo "‚ùå Server entry point not found"
            exit 1
          fi
          echo "‚úÖ Build output verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Security and dependency scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          pnpm audit --audit-level moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found, but continuing..."
          }

      - name: Dependency check
        run: |
          echo "üîç Checking for outdated dependencies..."
          pnpm outdated || {
            echo "‚ö†Ô∏è Outdated dependencies found, but continuing..."
          }

  # Deploy to Droplet
  deploy-droplet:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_PRIVATE_KEY }}

      - name: Add Droplet to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to Droplet
        run: |
          echo "üöÄ Deploying to Droplet at ${{ env.DROPLET_IP }}..."
          # Navigate to the application directory on the droplet
          ssh root@${{ env.DROPLET_IP }} "cd /opt/tetrix/miniverxe && git pull origin ${{ github.ref_name }}"
          
          # Rebuild and restart Docker Compose services
          ssh root@${{ env.DROPLET_IP }} "cd /opt/tetrix/miniverxe && docker-compose -f docker-compose.digitalocean.yml down --remove-orphans && docker-compose -f docker-compose.digitalocean.yml up -d --build"
          
          echo "‚úÖ Deployment commands sent to droplet"

      - name: Wait for services to become healthy
        run: |
          echo "‚è≥ Waiting for services to become healthy..."
          for i in {1..10}; do
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.DROPLET_IP }}/health)
            if [ "$HEALTH_STATUS" -eq 200 ]; then
              echo "‚úÖ Application is healthy!"
              break
            else
              echo "Waiting for application to become healthy (status: $HEALTH_STATUS)..."
              sleep 10
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Application did not become healthy within timeout."
              exit 1
            fi
          done

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          curl -f http://${{ env.DROPLET_IP }}/ || { echo "‚ùå Homepage load failed"; exit 1; }
          curl -f http://${{ env.DROPLET_IP }}/api/health || { echo "‚ùå API health check failed"; exit 1; }
          echo "‚úÖ Smoke tests passed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Droplet deployment successful!"
          echo "üåê Application URL: http://${{ env.DROPLET_IP }}"
          echo "üè• Health Check: http://${{ env.DROPLET_IP }}/health"

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy-droplet
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_PRIVATE_KEY }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment on droplet ${{ env.DROPLET_IP }}..."
          # This is a simplified rollback. For a real scenario, you might pull a previous Git tag
          # or revert to a previous Docker image.
          ssh root@${{ env.DROPLET_IP }} "cd /opt/tetrix/miniverxe && git reset --hard HEAD~1 && docker-compose -f docker-compose.digitalocean.yml up -d --build"
          echo "‚úÖ Rollback initiated. Manual verification needed."

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [build-and-test, deploy-droplet, rollback]
    steps:
      - name: Cleanup artifacts
        run: |
          echo "üßπ Cleaning up artifacts..."
          # Cleanup logic here
          echo "‚úÖ Cleanup completed"
