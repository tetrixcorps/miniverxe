---
// 2FA Modal Component for Enterprise Authentication
---

<div id="2fa-modal" class="modal-2fa fixed inset-0 bg-gray-800 bg-opacity-60 z-[100] hidden transition-opacity duration-300" aria-modal="true" role="dialog" tabindex="-1">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-hidden border-2 border-gray-200">
      <!-- Modal Header -->
      <div class="bg-gradient-to-r from-brand-red via-brand-orange to-brand-yellow p-6">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-2xl font-bold text-white mb-2" id="modal-title">Enterprise Authentication</h2>
            <p class="text-white/90 text-sm" id="modal-subtitle">Secure 2FA verification required</p>
            <div id="auth-context-badge" class="mt-2">
              <span id="context-badge" class="inline-block bg-white/20 text-white px-3 py-1 rounded-full text-xs font-semibold"></span>
            </div>
          </div>
          <button id="close-2fa-modal" class="text-white hover:text-white/80 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="p-6">
        <!-- Step 1: Phone Number Input -->
        <div id="2fa-step-1" class="space-y-4">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-brand-red/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#128222;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Enter Your Phone Number</h3>
            <p class="text-gray-600 text-sm">We'll send you a verification code via SMS or Voice call</p>
          </div>

          <form id="phone-form" class="space-y-4">
            <div>
              <label for="phone-number" class="block text-sm font-medium text-gray-700 mb-2">
                Phone Number
              </label>
              <input
                type="tel"
                id="phone-number"
                name="phoneNumber"
                placeholder="+1 (555) 123-4567, +44 20 7946 0958, +33 1 23 45 67 89, +86 138 0013 8000"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-lg font-medium bg-white shadow-sm text-gray-900 placeholder-gray-500"
                style="z-index: 10; position: relative;"
                required
              >
              <p class="text-xs text-gray-500 mt-1">Include country code (e.g., +1 for US, +44 for UK, +33 for France, +86 for China, +91 for India)</p>
            </div>

            <div>
              <label for="verification-method" class="block text-sm font-medium text-gray-700 mb-2">
                Verification Method
              </label>
              <select
                id="verification-method"
                name="method"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-lg font-medium bg-white shadow-sm text-gray-900"
                style="z-index: 10; position: relative;"
              >
                <option value="sms">SMS Text Message</option>
                <option value="voice">Voice Call</option>
                <option value="whatsapp">WhatsApp</option>
                <option value="flashcall">Flash Call</option>
              </select>
              <p class="text-xs text-gray-500 mt-2">
                Choose a verification channel. WhatsApp and Flash Call are available in supported countries.
              </p>
            </div>

            <button
              type="submit"
              id="send-code-btn"
              class="w-full bg-gradient-to-r from-brand-red to-brand-orange text-white py-3 px-4 rounded-lg font-semibold hover:from-brand-red/90 hover:to-brand-orange/90 transition-all duration-200 shadow-lg"
            >
              <span id="send-code-text">Send Verification Code</span>
              <div id="send-code-spinner" class="hidden">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
              </div>
            </button>
          </form>
        </div>

        <!-- Step 2: Code Verification -->
        <div id="2fa-step-2" class="space-y-4 hidden">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#128222;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Enter Verification Code</h3>
            <p class="text-gray-600 text-sm">
              We sent a 6-digit code to <span id="phone-display" class="font-semibold text-gray-900"></span>
            </p>
            <button
              id="resend-code-btn"
              class="text-brand-red text-sm hover:underline mt-2"
              disabled
            >
              Resend code in <span id="resend-timer">60</span>s
            </button>
          </div>

          <form id="code-form" class="space-y-4">
            <div>
              <label for="verification-code" class="block text-sm font-medium text-gray-700 mb-2">
                Verification Code
              </label>
              <input
                type="text"
                id="verification-code"
                name="code"
                placeholder="123456"
                maxlength="6"
                class="w-full px-4 py-4 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-center text-3xl font-mono tracking-widest bg-white shadow-sm text-gray-900 placeholder-gray-500"
                style="z-index: 10; position: relative;"
                required
              >
            </div>

            <button
              type="submit"
              id="verify-code-btn"
              class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-4 rounded-lg font-semibold hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg"
            >
              <span id="verify-code-text">Verify Code</span>
              <div id="verify-code-spinner" class="hidden">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
              </div>
            </button>
          </form>
        </div>

        <!-- Step 3: Success -->
        <div id="2fa-step-3" class="space-y-4 hidden">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#10004;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Authentication Successful!</h3>
            <p class="text-gray-600 text-sm">You are now securely logged in</p>
          </div>

          <div class="space-y-3">
            <!-- Code Academy Button -->
            <button
              id="redirect-code-academy"
              class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hidden"
            >
              Continue to Code Academy
            </button>

            <!-- JoRoMi Button -->
            <button
              id="redirect-joromi"
              class="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-all duration-200 shadow-lg hidden"
            >
              Continue to JoRoMi Platform
            </button>
            
            <!-- JoRoMi Button - Removed: JoRoMi has its own authentication system -->
            
            <!-- Client Dashboard Button -->
            <button
              id="redirect-dashboard"
              class="w-full bg-gradient-to-r from-gray-800 to-gray-900 text-white py-3 px-4 rounded-lg font-semibold hover:from-gray-900 hover:to-black transition-all duration-200 shadow-lg hidden"
            >
              Go to Client Dashboard
            </button>
            
            <!-- Generic Continue Button -->
            <button
              id="redirect-custom"
              class="w-full bg-gradient-to-r from-brand-red to-brand-orange text-white py-3 px-4 rounded-lg font-semibold hover:from-brand-red/90 hover:to-brand-orange/90 transition-all duration-200 shadow-lg hidden"
            >
              Continue
            </button>
          </div>
        </div>

        <!-- Error Messages -->
        <div id="2fa-error" class="error-2fa hidden bg-red-50 border-2 border-red-200 rounded-lg p-4 mt-4 shadow-sm">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-semibold text-red-800">Authentication Error</h3>
              <p id="error-message" class="text-sm text-red-700 mt-1 font-medium"></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  declare global {
    interface Window {
      twoFAManager: any;
      open2FAModal: () => void;
      tetrixAuthContext?: string;
      showJoRoMiInterface?: (options: any) => void;
    }
  }

  class TwoFAManager {
    currentStep: number;
    verificationId: string | null;
    phoneNumber: string | null;
    method: string;
    resendCountdown: number;
    resendTimer: number | null;
    authContext: string;

    constructor() {
      this.currentStep = 1;
      this.verificationId = null;
      this.phoneNumber = null;
      this.method = 'sms';
      this.resendTimer = null;
      this.resendCountdown = 60;
      this.authContext = 'default';
      
      this.initializeEventListeners();
      this.updateAuthContext();
    }

    updateAuthContext() {
      // Get context from global variable or default
      this.authContext = (window as any).tetrixAuthContext || 'default';
      
      const contextBadge = document.getElementById('context-badge');
      const modalTitle = document.getElementById('modal-title');
      const modalSubtitle = document.getElementById('modal-subtitle');
      
      if (contextBadge && modalTitle && modalSubtitle) {
        switch (this.authContext) {
          case 'code-academy':
            contextBadge.textContent = 'Code Academy';
            modalTitle.textContent = 'Code Academy Access';
            modalSubtitle.textContent = 'Verify your identity to access Code Academy';
            break;
          case 'joromi':
            contextBadge.textContent = 'JoRoMi Platform';
            modalTitle.textContent = 'JoRoMi Platform Access';
            modalSubtitle.textContent = 'Verify your identity to access JoRoMi AI Platform';
            break;
          case 'dashboard':
            contextBadge.textContent = 'Client Dashboard';
            modalTitle.textContent = 'Client Dashboard Access';
            modalSubtitle.textContent = 'Verify your identity to access your dashboard';
            break;
          default:
            contextBadge.textContent = 'TETRIX Platform';
            modalTitle.textContent = 'Enterprise Authentication';
            modalSubtitle.textContent = 'Secure 2FA verification required';
        }
      }
    }

    showContextSpecificButtons() {
      // Hide all context-specific buttons first
      const codeAcademyBtn = document.getElementById('redirect-code-academy');
      const joromiBtn = document.getElementById('redirect-joromi');
      const dashboardBtn = document.getElementById('redirect-dashboard');
      
      if (codeAcademyBtn) codeAcademyBtn.classList.add('hidden');
      if (joromiBtn) joromiBtn.classList.add('hidden');
      if (dashboardBtn) dashboardBtn.classList.add('hidden');
      
      // Show the appropriate button based on context
      switch (this.authContext) {
        case 'code-academy':
          if (codeAcademyBtn) codeAcademyBtn.classList.remove('hidden');
          break;
        case 'joromi':
          if (joromiBtn) joromiBtn.classList.remove('hidden');
          break;
        case 'dashboard':
          if (dashboardBtn) dashboardBtn.classList.remove('hidden');
          break;
        default:
          // Show dashboard button for default context
          if (dashboardBtn) dashboardBtn.classList.remove('hidden');
      }
    }

    initializeEventListeners() {
      // Phone form submission
      document.getElementById('phone-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handlePhoneSubmit();
      });

      // Code form submission
      document.getElementById('code-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleCodeSubmit();
      });

      // Resend code button
      document.getElementById('resend-code-btn')?.addEventListener('click', () => {
        this.resendCode();
      });

      // Redirect buttons
      document.getElementById('redirect-code-academy')?.addEventListener('click', () => {
        // Redirect to Code Academy with authentication token
        const authToken = localStorage.getItem('tetrix_auth_token');
        const codeAcademyUrl = window.location.hostname.includes('tetrixcorp.com') 
          ? '/code-academy' 
          : 'http://localhost:3001';
        
        if (authToken) {
          // Open Code Academy with authentication token
          window.open(`${codeAcademyUrl}/tetrix-auth?token=${authToken}`, '_blank');
        } else {
          // Fallback to regular Code Academy page
          window.open(codeAcademyUrl, '_blank');
        }
        this.closeModal();
      });

      document.getElementById('redirect-joromi')?.addEventListener('click', () => {
        // Show JoRoMi dashboard after successful authentication
        if (window.showJoRoMiInterface) {
          window.showJoRoMiInterface({ id: 'joromi-session-' + Date.now() });
        } else {
          // Fallback: redirect to JoRoMi page
          window.location.href = '/joromi';
        }
        this.closeModal();
      });

      document.getElementById('redirect-dashboard')?.addEventListener('click', () => {
        window.location.href = '/dashboard';
      });

      document.getElementById('redirect-custom')?.addEventListener('click', () => {
        this.handleCustomRedirect();
      });

      // Close modal
      document.getElementById('close-2fa-modal')?.addEventListener('click', () => {
        this.closeModal();
      });

      // Auto-format phone number
      document.getElementById('phone-number')?.addEventListener('input', (e) => {
        if (e.target instanceof HTMLInputElement) {
          this.formatPhoneNumber(e.target);
        }
      });

      // Auto-submit on 6 digits
      document.getElementById('verification-code')?.addEventListener('input', (e) => {
        if (e.target instanceof HTMLInputElement && e.target.value.length === 6) {
          this.handleCodeSubmit();
        }
      });
    }

    formatPhoneNumber(input: HTMLInputElement) {
      let value = input.value;
      
      // Remove all non-digit characters except +
      let cleanValue = value.replace(/[^\d+]/g, '');
      
      // Remove double plus signs
      if (cleanValue.startsWith('++')) {
        cleanValue = cleanValue.substring(1);
      }
      
      // Ensure single + at the beginning
      if (!cleanValue.startsWith('+')) {
        cleanValue = '+' + cleanValue;
      }
      
      // Extract digits after the +
      let digits = cleanValue.slice(1).replace(/\D/g, '');
      
      if (digits.length > 0) {
        // Handle US numbers (10 digits) - add +1
        if (digits.length === 10) {
          value = `+1 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
        }
        // Handle US numbers (11 digits starting with 1)
        else if (digits.length === 11 && digits.startsWith('1')) {
          value = `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
        }
        // Handle other international numbers - more flexible formatting
        else if (digits.length <= 3) {
          value = `+${digits}`;
        } else if (digits.length <= 6) {
          value = `+${digits.slice(0, 1)} (${digits.slice(1, 4)}) ${digits.slice(4)}`;
        } else if (digits.length <= 10) {
          value = `+${digits.slice(0, 1)} (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
        } else if (digits.length <= 12) {
          // Handle longer international numbers
          value = `+${digits.slice(0, 2)} (${digits.slice(2, 5)}) ${digits.slice(5, 8)}-${digits.slice(8)}`;
        } else {
          // Very long numbers - just add + and basic formatting
          value = `+${digits.slice(0, 2)} (${digits.slice(2, 5)}) ${digits.slice(5, 8)}-${digits.slice(8, 12)}`;
        }
      } else {
        value = '+';
      }
      
      input.value = value;
    }

    validatePhoneNumber(phoneNumber: string): { isValid: boolean; error?: string; formatted?: string } {
      if (!phoneNumber) {
        return { isValid: false, error: 'Phone number is required' };
      }

      // Remove all non-digit characters except +
      let cleanPhone = phoneNumber.replace(/[^\d+]/g, '');
      
      // Remove double plus signs
      if (cleanPhone.startsWith('++')) {
        cleanPhone = cleanPhone.substring(1);
      }
      
      // Ensure it starts with +
      if (!cleanPhone.startsWith('+')) {
        cleanPhone = '+' + cleanPhone;
      }
      
      // Extract digits after the +
      const digits = cleanPhone.slice(1).replace(/\D/g, '');
      
      // Validate E.164 format: + followed by 1-15 digits, first digit cannot be 0
      if (digits.length < 7 || digits.length > 15 || digits.startsWith('0')) {
        return { 
          isValid: false, 
          error: 'Invalid phone number format. Examples: +1 (555) 123-4567, +44 20 7946 0958, +33 1 23 45 67 89, +86 138 0013 8000' 
        };
      }

      // Additional validation for US numbers
      if (digits.startsWith('1') && digits.length !== 11) {
        return { 
          isValid: false, 
          error: 'US/Canada numbers must be 11 digits (including country code 1)' 
        };
      }

      return { isValid: true, formatted: cleanPhone };
    }

    async handlePhoneSubmit() {
      const phoneInput = document.getElementById('phone-number') as HTMLInputElement;
      const methodSelect = document.getElementById('verification-method') as HTMLSelectElement;
      
      // Extract phone number with proper international formatting
      let phoneValue = phoneInput?.value || '';
      
      // Use standardized phone validation
      const phoneValidation = this.validatePhoneNumber(phoneValue);
      if (!phoneValidation.isValid) {
        this.showError(phoneValidation.error || 'Invalid phone number format');
        return;
      }

      this.phoneNumber = phoneValidation.formatted!; // Keep + prefix for consistency
      this.method = methodSelect?.value || 'sms';

      this.setLoading('send-code', true);
      this.hideError();

      try {
        console.log('Initiating 2FA for phone:', this.phoneNumber, 'method:', this.method);
        
        const requestBody = {
          phoneNumber: this.phoneNumber, // Already includes + prefix
          method: this.method,
          userAgent: navigator.userAgent,
          ipAddress: await this.getClientIP(),
          sessionId: this.generateSessionId()
        };
        
        console.log('2FA request body:', requestBody);
        
        const response = await fetch('/api/v2/2fa/initiate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        });

        console.log('2FA initiation response status:', response.status);
        console.log('2FA initiation response headers:', Object.fromEntries(response.headers.entries()));
        
        const result = await response.json();
        console.log('2FA initiation result:', result);

        if (result.success) {
          this.verificationId = result.verificationId;
          this.showStep(2);
          this.startResendTimer();
          this.hideError();
          console.log('2FA initiated successfully, verification ID:', this.verificationId);
        } else {
          this.showError(result.message || result.error || 'Failed to send verification code');
        }
      } catch (error) {
        console.error('2FA initiation error:', error);
        this.showError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoading('send-code', false);
      }
    }

    async handleCodeSubmit() {
      const codeInput = document.getElementById('verification-code') as HTMLInputElement;
      const code = codeInput?.value || '';

      if (!code || code.length !== 6) {
        this.showError('Please enter a valid 6-digit code');
        return;
      }

      this.setLoading('verify-code', true);
      this.hideError();

      try {
        console.log('Verifying code:', code, 'for verification ID:', this.verificationId);
        
        const response = await fetch('/api/v2/2fa/verify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            verificationId: this.verificationId,
            code: code,
            phoneNumber: this.phoneNumber // Already includes + prefix
          })
        });

        console.log('2FA verification response status:', response.status);
        const result = await response.json();
        console.log('2FA verification result:', result);

        if (result.success && result.verified) {
          // Check if this is being called from industry auth
          if ((window as any).handle2FAResult) {
            // Re-enable the button before closing
            this.setLoading('verify-code', false);
            // Return result to industry auth
            (window as any).handle2FAResult({
              success: true,
              phoneNumber: this.phoneNumber,
              verificationId: this.verificationId,
              token: result.token
            });
            // Close the 2FA modal
            this.closeModal();
            return;
          }
          
          this.showStep(3);
          this.hideError();
          // Store authentication token
          if (result.token) {
            localStorage.setItem('tetrix_auth_token', result.token);
            console.log('Authentication token stored:', result.token);
          }
          console.log('2FA verification successful');
          
          // Show context-specific buttons based on authentication context
          this.showContextSpecificButtons();
        } else {
          const errorMessage = this.getDetailedErrorMessage(result);
          this.showError(errorMessage);
        }
      } catch (error) {
        console.error('2FA verification error:', error);
        this.showError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoading('verify-code', false);
      }
    }

    async resendCode() {
      if (this.resendCountdown > 0) return;

      this.setLoading('send-code', true);

      try {
        const response = await fetch('/api/v2/2fa/initiate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            phoneNumber: this.phoneNumber, // Already includes + prefix
            method: this.method,
            userAgent: navigator.userAgent,
            ipAddress: await this.getClientIP(),
            sessionId: this.generateSessionId()
          })
        });

        const result = await response.json();

        if (result.success) {
          this.verificationId = result.verificationId;
          this.startResendTimer();
          this.hideError();
        } else {
          this.showError(result.message || 'Failed to resend verification code');
        }
      } catch (error) {
        console.error('2FA resend error:', error);
        this.showError('Network error. Please try again.');
      } finally {
        this.setLoading('send-code', false);
      }
    }

    showStep(step: number) {
      // Hide all steps
      document.getElementById('2fa-step-1')?.classList.add('hidden');
      document.getElementById('2fa-step-2')?.classList.add('hidden');
      document.getElementById('2fa-step-3')?.classList.add('hidden');

      // Show current step
      document.getElementById(`2fa-step-${step}`)?.classList.remove('hidden');
      this.currentStep = step;

      // Update phone display
      if (step === 2) {
        const phoneDisplay = document.getElementById('phone-display');
        if (phoneDisplay && this.phoneNumber) {
          phoneDisplay.textContent = this.formatPhoneDisplay(this.phoneNumber || '');
        }
      }

      // Show appropriate redirect button based on context
      if (step === 3) {
        this.showContextButton();
      }
    }

    showContextButton() {
      // Use the more comprehensive showContextSpecificButtons method
      this.showContextSpecificButtons();
    }

    formatPhoneDisplay(phone: string) {
      const cleaned = phone.replace(/\D/g, '');
      
      // Handle US numbers
      if (cleaned.length === 11 && cleaned.startsWith('1')) {
        return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;
      } else if (cleaned.length === 10) {
        return `+1 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;
      }
      // Handle other international numbers
      else if (cleaned.length >= 7 && cleaned.length <= 15) {
        // Format based on length
        if (cleaned.length <= 10) {
          return `+${cleaned}`;
        } else if (cleaned.length <= 12) {
          return `+${cleaned.slice(0, 2)} (${cleaned.slice(2, 5)}) ${cleaned.slice(5)}`;
        } else {
          return `+${cleaned.slice(0, 2)} (${cleaned.slice(2, 5)}) ${cleaned.slice(5, 8)}-${cleaned.slice(8)}`;
        }
      }
      
      return `+${cleaned}`;
    }

    setLoading(buttonType: string, isLoading: boolean) {
      const button = document.getElementById(`${buttonType}-btn`);
      const text = document.getElementById(`${buttonType}-text`);
      const spinner = document.getElementById(`${buttonType}-spinner`);

      if (button && text && spinner) {
        (button as HTMLButtonElement).disabled = isLoading;
        if (isLoading) {
          text.classList.add('hidden');
          spinner.classList.remove('hidden');
        } else {
          text.classList.remove('hidden');
          spinner.classList.add('hidden');
        }
      }
    }

    showError(message: string) {
      const errorDiv = document.getElementById('2fa-error');
      const errorMessage = document.getElementById('error-message');
      
      if (errorDiv && errorMessage) {
        errorMessage.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }

    hideError() {
      const errorDiv = document.getElementById('2fa-error');
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
    }

    startResendTimer() {
      this.resendCountdown = 60;
      const resendBtn = document.getElementById('resend-code-btn');
      const timerSpan = document.getElementById('resend-timer');

      if (resendBtn && timerSpan) {
        (resendBtn as HTMLButtonElement).disabled = true;
        
        this.resendTimer = window.setInterval(() => {
          this.resendCountdown--;
          timerSpan.textContent = this.resendCountdown.toString();
          
          if (this.resendCountdown <= 0) {
            if (this.resendTimer) {
              window.clearInterval(this.resendTimer);
            }
            (resendBtn as HTMLButtonElement).disabled = false;
            resendBtn.innerHTML = 'Resend Code';
          }
        }, 1000);
      }
    }

    async getClientIP() {
      try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
      } catch {
        return 'unknown';
      }
    }

    generateSessionId() {
      return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    }

    getDetailedErrorMessage(result: any): string {
      // Handle specific error cases
      if (result.details?.responseCode) {
        switch (result.details.responseCode) {
          case 'rejected':
            return 'Invalid verification code. Please check the code and try again.';
          case 'expired':
            return 'Verification code has expired. Please request a new code.';
          case 'max_attempts':
            return 'Maximum verification attempts exceeded. Please request a new code.';
          case 'invalid_phone_number':
            return 'Invalid phone number format. Please check your number and try again.';
          default:
            return result.details.message || 'Verification failed. Please try again.';
        }
      }
      
      // Handle general error messages
      if (result.message) {
        return result.message;
      }
      
      if (result.error) {
        return result.error;
      }
      
      return 'Verification failed. Please try again.';
    }

    openModal() {
      const modal = document.getElementById('2fa-modal');
      if (modal) {
        // Disable Industry Auth modal pointer events
        const industryModal = document.getElementById('industry-auth-modal');
        if (industryModal) {
          industryModal.classList.add('disable-pointer');
        }
        
        // Open 2FA modal
        modal.classList.remove('hidden');
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
        document.body.classList.add('modal-open');
        
        // Hide main content for accessibility
        const main = document.querySelector('main');
        if (main) {
          main.setAttribute('aria-hidden', 'true');
        }
        
        this.showStep(1);
        this.hideError();
        this.updateModalForContext();
      }
    }

    updateModalForContext() {
      // Get authentication context from global variable
      this.authContext = window.tetrixAuthContext || 'default';
      
      const modalTitle = document.getElementById('modal-title');
      const modalSubtitle = document.getElementById('modal-subtitle');
      const redirectDashboard = document.getElementById('redirect-dashboard');
      const redirectCustom = document.getElementById('redirect-custom');

      switch (this.authContext) {
        case 'dashboard':
          if (modalTitle) modalTitle.textContent = 'Client Dashboard Access';
          if (modalSubtitle) modalSubtitle.textContent = 'Authenticate to access your enterprise dashboard';
          if (redirectDashboard) redirectDashboard.classList.remove('hidden');
          if (redirectCustom) redirectCustom.classList.add('hidden');
          break;
        case 'code-academy':
          if (modalTitle) modalTitle.textContent = 'Code Academy Access';
          if (modalSubtitle) modalSubtitle.textContent = 'Authenticate to access TETRIX Code Academy';
          if (redirectDashboard) redirectDashboard.classList.add('hidden');
          if (redirectCustom) redirectCustom.classList.remove('hidden');
          break;
        default:
          if (modalTitle) modalTitle.textContent = 'Enterprise Authentication';
          if (modalSubtitle) modalSubtitle.textContent = 'Secure 2FA verification required';
          if (redirectDashboard) redirectDashboard.classList.remove('hidden');
          if (redirectCustom) redirectCustom.classList.add('hidden');
      }
    }

    // getJoromiUrl method removed - JoRoMi has its own authentication system

    getCodeAcademyUrl() {
      // Get environment-specific Code Academy URL
      const hostname = window.location.hostname;
      
      if (hostname.includes('tetrixcorp.com')) {
        return '/code-academy';
      } else if (hostname.includes('staging')) {
        return 'https://staging.poisonedreligion.ai';
      } else {
        return 'http://localhost:3001';
      }
    }

    handleCustomRedirect() {
      // Handle custom redirects based on context
      switch (this.authContext) {
        case 'dashboard':
          window.location.href = '/dashboard';
          break;
        case 'code-academy':
          const codeAcademyUrl = this.getCodeAcademyUrl();
          window.location.href = codeAcademyUrl;
          break;
        default:
          window.location.href = '/';
      }
      this.closeModal();
    }

    closeModal() {
      const modal = document.getElementById('2fa-modal');
      if (modal) {
        modal.classList.add('hidden');
        modal.style.display = 'none';
        document.body.style.overflow = '';
        document.body.classList.remove('modal-open');
        
        // Restore main content accessibility
        const main = document.querySelector('main');
        if (main) {
          main.removeAttribute('aria-hidden');
        }
        
        this.reset();
      }
      
      // Restore Industry Auth modal pointer events
      const industryModal = document.getElementById('industry-auth-modal');
      if (industryModal) {
        industryModal.classList.remove('disable-pointer');
        console.log('Industry Auth modal pointer events restored');
      }
    }

    reset() {
      this.currentStep = 1;
      this.verificationId = null;
      this.phoneNumber = null;
      this.method = 'sms';
      
      if (this.resendTimer) {
        window.clearInterval(this.resendTimer);
        this.resendTimer = null;
      }
      
      // Reset forms
      const phoneForm = document.getElementById('phone-form') as HTMLFormElement;
      const codeForm = document.getElementById('code-form') as HTMLFormElement;
      phoneForm?.reset();
      codeForm?.reset();
    }
  }

  // Initialize 2FA Manager
  window.twoFAManager = new TwoFAManager();

  // Watch for 2FA modal visibility changes and disable Industry Auth modal
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        const target = mutation.target;
        if (target.id === '2fa-modal') {
          const industryModal = document.getElementById('industry-auth-modal');
          if (industryModal) {
            if (!target.classList.contains('hidden')) {
              // 2FA modal is visible, disable Industry Auth modal
              industryModal.classList.add('disable-pointer');
              console.log('Industry Auth modal disabled via observer');
            } else {
              // 2FA modal is hidden, enable Industry Auth modal
              industryModal.classList.remove('disable-pointer');
              console.log('Industry Auth modal enabled via observer');
            }
          }
        }
      }
    });
  });

  // Start observing the 2FA modal
  const twoFAModal = document.getElementById('2fa-modal');
  if (twoFAModal) {
    observer.observe(twoFAModal, { attributes: true, attributeFilter: ['class'] });
  }

  // Global function to open 2FA modal
  window.open2FAModal = function() {
    console.log('2FAModal.astro: open2FAModal called');
    
    // Update context before opening
    window.twoFAManager.updateAuthContext();
    window.twoFAManager.openModal();
  };

  // Global functions for modal management
  window.show2FAModal = function() {
    const industryModal = document.getElementById('industry-auth-modal');
    if (industryModal) {
      industryModal.classList.add('disable-pointer');
    }
    const twoFAModal = document.getElementById('2fa-modal');
    if (twoFAModal) {
      twoFAModal.classList.remove('hidden');
    }
  };

  window.close2FAModal = function() {
    const twoFAModal = document.getElementById('2fa-modal');
    if (twoFAModal) {
      twoFAModal.classList.add('hidden');
    }
    const industryModal = document.getElementById('industry-auth-modal');
    if (industryModal) {
      industryModal.classList.remove('disable-pointer');
    }
  };
</script>

<style>
  /* Enhanced modal styling for better visibility */
  .modal-2fa {
    backdrop-filter: blur(8px);
  }

  .modal-2fa .bg-white {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Input focus improvements */
  #phone-number:focus,
  #verification-code:focus,
  #verification-method:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    z-index: 20;
    position: relative;
  }

  /* Ensure input text is visible */
    #phone-number,
    #verification-code,
    #verification-method {
      color: #111827 !important;
      background-color: #ffffff !important;
      z-index: 10;
      position: relative;
      border: 2px solid #d1d5db !important;
    }
    
    #phone-number:focus,
    #verification-code:focus,
    #verification-method:focus {
      border-color: #ef4444 !important;
      box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
      outline: none !important;
    }

  /* Fix dropdown visibility */
  #verification-method {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
  }

  /* Ensure dropdown options are visible */
  #verification-method option {
    background-color: #ffffff !important;
    color: #111827 !important;
    padding: 8px 12px;
    font-size: 16px;
    line-height: 1.5;
  }
  
  /* Ensure dropdown options are visible when opened */
  #verification-method:focus option {
    background-color: #ffffff !important;
    color: #111827 !important;
  }

  /* Button hover improvements */
  #send-code-btn:hover,
  #verify-code-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  }

  /* Loading spinner improvements */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Error message animation */
  .error-2fa {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
