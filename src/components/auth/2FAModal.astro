---
// 2FA Modal Component for Enterprise Authentication
---

<div id="2fa-modal" class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-hidden border-2 border-gray-200">
      <!-- Modal Header -->
      <div class="bg-gradient-to-r from-brand-red via-brand-orange to-brand-yellow p-6">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-2xl font-bold text-white mb-2" id="modal-title">Enterprise Authentication</h2>
            <p class="text-white/90 text-sm" id="modal-subtitle">Secure 2FA verification required</p>
            <div id="auth-context-badge" class="mt-2">
              <span id="context-badge" class="inline-block bg-white/20 text-white px-3 py-1 rounded-full text-xs font-semibold"></span>
            </div>
          </div>
          <button id="close-2fa-modal" class="text-white hover:text-white/80 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="p-6">
        <!-- Step 1: Phone Number Input -->
        <div id="2fa-step-1" class="space-y-4">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-brand-red/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#128222;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Enter Your Phone Number</h3>
            <p class="text-gray-600 text-sm">We'll send you a verification code via SMS or Voice call</p>
          </div>

          <form id="phone-form" class="space-y-4">
            <div>
              <label for="phone-number" class="block text-sm font-medium text-gray-700 mb-2">
                Phone Number
              </label>
              <input
                type="tel"
                id="phone-number"
                name="phoneNumber"
                placeholder="+1 (555) 123-4567"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-lg font-medium bg-white shadow-sm"
                required
              >
              <p class="text-xs text-gray-500 mt-1">Include country code (e.g., +1 for US)</p>
            </div>

            <div>
              <label for="verification-method" class="block text-sm font-medium text-gray-700 mb-2">
                Verification Method
              </label>
              <select
                id="verification-method"
                name="method"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-lg font-medium bg-white shadow-sm"
              >
                <option value="sms">SMS Text Message</option>
                <option value="voice">Voice Call</option>
                <option value="whatsapp">WhatsApp</option>
              </select>
            </div>

            <button
              type="submit"
              id="send-code-btn"
              class="w-full bg-gradient-to-r from-brand-red to-brand-orange text-white py-3 px-4 rounded-lg font-semibold hover:from-brand-red/90 hover:to-brand-orange/90 transition-all duration-200 shadow-lg"
            >
              <span id="send-code-text">Send Verification Code</span>
              <div id="send-code-spinner" class="hidden">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
              </div>
            </button>
          </form>
        </div>

        <!-- Step 2: Code Verification -->
        <div id="2fa-step-2" class="space-y-4 hidden">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#128222;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Enter Verification Code</h3>
            <p class="text-gray-600 text-sm">
              We sent a 6-digit code to <span id="phone-display" class="font-semibold text-gray-900"></span>
            </p>
            <button
              id="resend-code-btn"
              class="text-brand-red text-sm hover:underline mt-2"
              disabled
            >
              Resend code in <span id="resend-timer">60</span>s
            </button>
          </div>

          <form id="code-form" class="space-y-4">
            <div>
              <label for="verification-code" class="block text-sm font-medium text-gray-700 mb-2">
                Verification Code
              </label>
              <input
                type="text"
                id="verification-code"
                name="code"
                placeholder="123456"
                maxlength="6"
                class="w-full px-4 py-4 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-brand-red transition-colors text-center text-3xl font-mono tracking-widest bg-white shadow-sm"
                required
              >
            </div>

            <button
              type="submit"
              id="verify-code-btn"
              class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-4 rounded-lg font-semibold hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg"
            >
              <span id="verify-code-text">Verify Code</span>
              <div id="verify-code-spinner" class="hidden">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
              </div>
            </button>
          </form>
        </div>

        <!-- Step 3: Success -->
        <div id="2fa-step-3" class="space-y-4 hidden">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-2xl">&#10004;</span>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Authentication Successful!</h3>
            <p class="text-gray-600 text-sm">You are now securely logged in</p>
          </div>

          <div class="space-y-3">
            <!-- Code Academy Button -->
            <button
              id="redirect-code-academy"
              class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hidden"
            >
              Continue to Code Academy
            </button>
            
            <!-- JoRoMi Button -->
            <button
              id="redirect-joromi"
              class="w-full bg-gradient-to-r from-red-600 to-red-700 text-white py-3 px-4 rounded-lg font-semibold hover:from-red-700 hover:to-red-800 transition-all duration-200 shadow-lg hidden"
            >
              Continue to JoRoMi Platform
            </button>
            
            <!-- Client Dashboard Button -->
            <button
              id="redirect-dashboard"
              class="w-full bg-gradient-to-r from-gray-800 to-gray-900 text-white py-3 px-4 rounded-lg font-semibold hover:from-gray-900 hover:to-black transition-all duration-200 shadow-lg hidden"
            >
              Go to Client Dashboard
            </button>
            
            <!-- Generic Continue Button -->
            <button
              id="redirect-custom"
              class="w-full bg-gradient-to-r from-brand-red to-brand-orange text-white py-3 px-4 rounded-lg font-semibold hover:from-brand-red/90 hover:to-brand-orange/90 transition-all duration-200 shadow-lg hidden"
            >
              Continue
            </button>
          </div>
        </div>

        <!-- Error Messages -->
        <div id="2fa-error" class="hidden bg-red-50 border-2 border-red-200 rounded-lg p-4 mt-4 shadow-sm">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-semibold text-red-800">Authentication Error</h3>
              <p id="error-message" class="text-sm text-red-700 mt-1 font-medium"></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class TwoFAManager {
    currentStep: number;
    verificationId: string | null;
    phoneNumber: string | null;
    method: string;
    resendCountdown: number;
    resendTimer: NodeJS.Timeout | null;
    authContext: string;

    constructor() {
      this.currentStep = 1;
      this.verificationId = null;
      this.phoneNumber = null;
      this.method = 'sms';
      this.resendTimer = null;
      this.resendCountdown = 60;
      this.authContext = 'default';
      
      this.initializeEventListeners();
      this.updateAuthContext();
    }

    updateAuthContext() {
      // Get context from global variable or default
      this.authContext = (window as any).tetrixAuthContext || 'default';
      
      const contextBadge = document.getElementById('context-badge');
      const modalTitle = document.getElementById('modal-title');
      const modalSubtitle = document.getElementById('modal-subtitle');
      
      if (contextBadge && modalTitle && modalSubtitle) {
        switch (this.authContext) {
          case 'code-academy':
            contextBadge.textContent = 'Code Academy';
            modalTitle.textContent = 'Code Academy Access';
            modalSubtitle.textContent = 'Verify your identity to access Code Academy';
            break;
          case 'joromi':
            contextBadge.textContent = 'JoRoMi Platform';
            modalTitle.textContent = 'JoRoMi Authentication';
            modalSubtitle.textContent = 'Secure access to JoRoMi platform';
            break;
          case 'dashboard':
            contextBadge.textContent = 'Client Dashboard';
            modalTitle.textContent = 'Client Dashboard Access';
            modalSubtitle.textContent = 'Verify your identity to access your dashboard';
            break;
          default:
            contextBadge.textContent = 'TETRIX Platform';
            modalTitle.textContent = 'Enterprise Authentication';
            modalSubtitle.textContent = 'Secure 2FA verification required';
        }
      }
    }

    initializeEventListeners() {
      // Phone form submission
      document.getElementById('phone-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handlePhoneSubmit();
      });

      // Code form submission
      document.getElementById('code-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleCodeSubmit();
      });

      // Resend code button
      document.getElementById('resend-code-btn')?.addEventListener('click', () => {
        this.resendCode();
      });

      // Redirect buttons
      document.getElementById('redirect-code-academy')?.addEventListener('click', () => {
        // Redirect to Code Academy with authentication token
        const authToken = localStorage.getItem('tetrix_auth_token');
        const codeAcademyUrl = window.location.hostname.includes('tetrixcorp.com') 
          ? 'https://poisonedreligion.ai' 
          : 'http://localhost:3001';
        
        if (authToken) {
          // Open Code Academy with authentication token
          window.open(`${codeAcademyUrl}/tetrix-auth?token=${authToken}`, '_blank');
        } else {
          // Fallback to regular Code Academy page
          window.open(codeAcademyUrl, '_blank');
        }
        this.closeModal();
      });

      document.getElementById('redirect-joromi')?.addEventListener('click', () => {
        // Pass the authentication token to JoRoMi
        const authToken = localStorage.getItem('tetrix_auth_token');
        const joromiUrl = this.getJoromiUrl();
        
        if (authToken) {
          // Open JoRoMi with authentication token
          window.open(`${joromiUrl}/tetrix-auth?redirect=joromi-dashboard&token=${authToken}`, '_blank');
        } else {
          // Fallback to regular JoRoMi page
          window.open(joromiUrl, '_blank');
        }
        this.closeModal();
      });

      document.getElementById('redirect-dashboard')?.addEventListener('click', () => {
        window.location.href = '/dashboard';
      });

      document.getElementById('redirect-custom')?.addEventListener('click', () => {
        this.handleCustomRedirect();
      });

      // Close modal
      document.getElementById('close-2fa-modal')?.addEventListener('click', () => {
        this.closeModal();
      });

      // Auto-format phone number
      document.getElementById('phone-number')?.addEventListener('input', (e) => {
        this.formatPhoneNumber(e.target);
      });

      // Auto-submit on 6 digits
      document.getElementById('verification-code')?.addEventListener('input', (e) => {
        if (e.target.value.length === 6) {
          this.handleCodeSubmit();
        }
      });
    }

    formatPhoneNumber(input) {
      let value = input.value.replace(/\D/g, '');
      if (value.length > 0) {
        // Handle US numbers (11 digits starting with 1)
        if (value.length === 11 && value.startsWith('1')) {
          value = `+1 (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7)}`;
        }
        // Handle US numbers (10 digits)
        else if (value.length === 10) {
          value = `+1 (${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6)}`;
        }
        // Handle other international numbers
        else if (value.length <= 3) {
          value = `+${value}`;
        } else if (value.length <= 6) {
          value = `+${value.slice(0, 1)} (${value.slice(1, 4)}) ${value.slice(4)}`;
        } else if (value.length <= 10) {
          value = `+${value.slice(0, 1)} (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7)}`;
        } else {
          value = `+${value.slice(0, 1)} (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7, 11)}`;
        }
      }
      input.value = value;
    }

    async handlePhoneSubmit() {
      const phoneInput = document.getElementById('phone-number');
      const methodSelect = document.getElementById('verification-method');
      
      this.phoneNumber = phoneInput.value.replace(/\D/g, '');
      this.method = methodSelect.value;

      if (!this.phoneNumber || this.phoneNumber.length < 10) {
        this.showError('Please enter a valid phone number');
        return;
      }

      this.setLoading('send-code', true);
      this.hideError();

      try {
        console.log('Initiating 2FA for phone:', `+${this.phoneNumber}`, 'method:', this.method);
        
        const response = await fetch('/api/v2/2fa/initiate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            phoneNumber: `+${this.phoneNumber}`,
            method: this.method,
            userAgent: navigator.userAgent,
            ipAddress: await this.getClientIP(),
            sessionId: this.generateSessionId()
          })
        });

        console.log('2FA initiation response status:', response.status);
        const result = await response.json();
        console.log('2FA initiation result:', result);

        if (result.success) {
          this.verificationId = result.verificationId;
          this.showStep(2);
          this.startResendTimer();
          this.hideError();
          console.log('2FA initiated successfully, verification ID:', this.verificationId);
        } else {
          this.showError(result.message || result.error || 'Failed to send verification code');
        }
      } catch (error) {
        console.error('2FA initiation error:', error);
        this.showError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoading('send-code', false);
      }
    }

    async handleCodeSubmit() {
      const codeInput = document.getElementById('verification-code');
      const code = codeInput.value;

      if (!code || code.length !== 6) {
        this.showError('Please enter a valid 6-digit code');
        return;
      }

      this.setLoading('verify-code', true);
      this.hideError();

      try {
        console.log('Verifying code:', code, 'for verification ID:', this.verificationId);
        
        const response = await fetch('/api/v2/2fa/verify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            verificationId: this.verificationId,
            code: code,
            phoneNumber: `+${this.phoneNumber}`
          })
        });

        console.log('2FA verification response status:', response.status);
        const result = await response.json();
        console.log('2FA verification result:', result);

        if (result.success && result.verified) {
          this.showStep(3);
          this.hideError();
          // Store authentication token
          if (result.token) {
            localStorage.setItem('tetrix_auth_token', result.token);
            console.log('Authentication token stored:', result.token);
          }
          console.log('2FA verification successful');
        } else {
          this.showError(result.message || result.error || 'Invalid verification code. Please try again.');
        }
      } catch (error) {
        console.error('2FA verification error:', error);
        this.showError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoading('verify-code', false);
      }
    }

    async resendCode() {
      if (this.resendCountdown > 0) return;

      this.setLoading('send-code', true);

      try {
        const response = await fetch('/api/v2/2fa/initiate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            phoneNumber: `+${this.phoneNumber}`,
            method: this.method,
            userAgent: navigator.userAgent,
            ipAddress: await this.getClientIP(),
            sessionId: this.generateSessionId()
          })
        });

        const result = await response.json();

        if (result.success) {
          this.verificationId = result.verificationId;
          this.startResendTimer();
          this.hideError();
        } else {
          this.showError(result.message || 'Failed to resend verification code');
        }
      } catch (error) {
        console.error('2FA resend error:', error);
        this.showError('Network error. Please try again.');
      } finally {
        this.setLoading('send-code', false);
      }
    }

    showStep(step) {
      // Hide all steps
      document.getElementById('2fa-step-1')?.classList.add('hidden');
      document.getElementById('2fa-step-2')?.classList.add('hidden');
      document.getElementById('2fa-step-3')?.classList.add('hidden');

      // Show current step
      document.getElementById(`2fa-step-${step}`)?.classList.remove('hidden');
      this.currentStep = step;

      // Update phone display
      if (step === 2) {
        const phoneDisplay = document.getElementById('phone-display');
        if (phoneDisplay) {
          phoneDisplay.textContent = this.formatPhoneDisplay(this.phoneNumber);
        }
      }

      // Show appropriate redirect button based on context
      if (step === 3) {
        this.showContextButton();
      }
    }

    showContextButton() {
      // Hide all redirect buttons
      document.getElementById('redirect-code-academy')?.classList.add('hidden');
      document.getElementById('redirect-joromi')?.classList.add('hidden');
      document.getElementById('redirect-dashboard')?.classList.add('hidden');
      document.getElementById('redirect-custom')?.classList.add('hidden');

      // Show the appropriate button based on context
      switch (this.authContext) {
        case 'code-academy':
          document.getElementById('redirect-code-academy')?.classList.remove('hidden');
          break;
        case 'joromi':
          document.getElementById('redirect-joromi')?.classList.remove('hidden');
          break;
        case 'dashboard':
          document.getElementById('redirect-dashboard')?.classList.remove('hidden');
          break;
        default:
          document.getElementById('redirect-custom')?.classList.remove('hidden');
      }
    }

    formatPhoneDisplay(phone) {
      const cleaned = phone.replace(/\D/g, '');
      if (cleaned.length === 11 && cleaned.startsWith('1')) {
        return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;
      } else if (cleaned.length === 10) {
        return `+1 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;
      }
      return `+${cleaned}`;
    }

    setLoading(buttonType, isLoading) {
      const button = document.getElementById(`${buttonType}-btn`);
      const text = document.getElementById(`${buttonType}-text`);
      const spinner = document.getElementById(`${buttonType}-spinner`);

      if (button && text && spinner) {
        button.disabled = isLoading;
        if (isLoading) {
          text.classList.add('hidden');
          spinner.classList.remove('hidden');
        } else {
          text.classList.remove('hidden');
          spinner.classList.add('hidden');
        }
      }
    }

    showError(message) {
      const errorDiv = document.getElementById('2fa-error');
      const errorMessage = document.getElementById('error-message');
      
      if (errorDiv && errorMessage) {
        errorMessage.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }

    hideError() {
      const errorDiv = document.getElementById('2fa-error');
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
    }

    startResendTimer() {
      this.resendCountdown = 60;
      const resendBtn = document.getElementById('resend-code-btn');
      const timerSpan = document.getElementById('resend-timer');

      if (resendBtn && timerSpan) {
        resendBtn.disabled = true;
        
        this.resendTimer = setInterval(() => {
          this.resendCountdown--;
          timerSpan.textContent = this.resendCountdown;
          
          if (this.resendCountdown <= 0) {
            clearInterval(this.resendTimer);
            resendBtn.disabled = false;
            resendBtn.innerHTML = 'Resend Code';
          }
        }, 1000);
      }
    }

    async getClientIP() {
      try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
      } catch {
        return 'unknown';
      }
    }

    generateSessionId() {
      return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    }

    openModal() {
      const modal = document.getElementById('2fa-modal');
      if (modal) {
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        this.showStep(1);
        this.hideError();
        this.updateModalForContext();
      }
    }

    updateModalForContext() {
      // Get authentication context from global variable
      this.authContext = window.tetrixAuthContext || 'default';
      
      const modalTitle = document.getElementById('modal-title');
      const modalSubtitle = document.getElementById('modal-subtitle');
      const redirectJoromi = document.getElementById('redirect-joromi');
      const redirectDashboard = document.getElementById('redirect-dashboard');
      const redirectCustom = document.getElementById('redirect-custom');

      switch (this.authContext) {
        case 'joromi':
          if (modalTitle) modalTitle.textContent = 'JoRoMi Platform Access';
          if (modalSubtitle) modalSubtitle.textContent = 'Authenticate to access JoRoMi VoIP platform';
          if (redirectJoromi) redirectJoromi.classList.remove('hidden');
          if (redirectDashboard) redirectDashboard.classList.add('hidden');
          if (redirectCustom) redirectCustom.classList.add('hidden');
          break;
        case 'dashboard':
          if (modalTitle) modalTitle.textContent = 'Client Dashboard Access';
          if (modalSubtitle) modalSubtitle.textContent = 'Authenticate to access your enterprise dashboard';
          if (redirectJoromi) redirectJoromi.classList.add('hidden');
          if (redirectDashboard) redirectDashboard.classList.remove('hidden');
          if (redirectCustom) redirectCustom.classList.add('hidden');
          break;
        case 'code-academy':
          if (modalTitle) modalTitle.textContent = 'Code Academy Access';
          if (modalSubtitle) modalSubtitle.textContent = 'Authenticate to access TETRIX Code Academy';
          if (redirectJoromi) redirectJoromi.classList.add('hidden');
          if (redirectDashboard) redirectDashboard.classList.add('hidden');
          if (redirectCustom) redirectCustom.classList.remove('hidden');
          break;
        default:
          if (modalTitle) modalTitle.textContent = 'Enterprise Authentication';
          if (modalSubtitle) modalSubtitle.textContent = 'Secure 2FA verification required';
          if (redirectJoromi) redirectJoromi.classList.remove('hidden');
          if (redirectDashboard) redirectDashboard.classList.remove('hidden');
          if (redirectCustom) redirectCustom.classList.add('hidden');
      }
    }

    getJoromiUrl() {
      // Get environment-specific JoRoMi URL
      const hostname = window.location.hostname;
      
      if (hostname.includes('tetrixcorp.com')) {
        return 'https://joromi.ai';
      } else if (hostname.includes('staging')) {
        return 'https://staging-joromi.tetrixcorp.com';
      } else {
        return 'http://localhost:3000';
      }
    }

    getCodeAcademyUrl() {
      // Get environment-specific Code Academy URL
      const hostname = window.location.hostname;
      
      if (hostname.includes('tetrixcorp.com')) {
        return 'https://poisonedreligion.ai';
      } else if (hostname.includes('staging')) {
        return 'https://staging.poisonedreligion.ai';
      } else {
        return 'http://localhost:3001';
      }
    }

    handleCustomRedirect() {
      // Handle custom redirects based on context
      switch (this.authContext) {
        case 'joromi':
          // Pass the authentication token to JoRoMi
          const authToken = localStorage.getItem('tetrix_auth_token');
          const joromiUrl = this.getJoromiUrl();
          
          if (authToken) {
            window.open(`${joromiUrl}/tetrix-auth?redirect=joromi-dashboard&token=${authToken}`, '_blank');
          } else {
            window.open(joromiUrl, '_blank');
          }
          break;
        case 'dashboard':
          window.location.href = '/dashboard';
          break;
        case 'code-academy':
          const codeAcademyUrl = this.getCodeAcademyUrl();
          window.location.href = codeAcademyUrl;
          break;
        default:
          window.location.href = '/';
      }
      this.closeModal();
    }

    closeModal() {
      const modal = document.getElementById('2fa-modal');
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
        this.reset();
      }
    }

    reset() {
      this.currentStep = 1;
      this.verificationId = null;
      this.phoneNumber = null;
      this.method = 'sms';
      
      if (this.resendTimer) {
        clearInterval(this.resendTimer);
        this.resendTimer = null;
      }
      
      // Reset forms
      document.getElementById('phone-form')?.reset();
      document.getElementById('code-form')?.reset();
    }
  }

  // Initialize 2FA Manager
  window.twoFAManager = new TwoFAManager();

  // Global function to open 2FA modal
  window.open2FAModal = function() {
    // Update context before opening
    window.twoFAManager.updateAuthContext();
    window.twoFAManager.openModal();
  };
</script>

<style>
  /* Enhanced modal styling for better visibility */
  #2fa-modal {
    backdrop-filter: blur(8px);
  }

  #2fa-modal .bg-white {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Input focus improvements */
  #phone-number:focus,
  #verification-code:focus,
  #verification-method:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  /* Button hover improvements */
  #send-code-btn:hover,
  #verify-code-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  }

  /* Loading spinner improvements */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Error message animation */
  #2fa-error {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
