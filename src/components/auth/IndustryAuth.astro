---
// Industry-Specific Authentication Component
// Handles authentication for different industries with role-based access
---

<div id="industry-auth-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-8">
      <!-- Header -->
      <div class="text-center mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Industry Authentication</h2>
        <p class="text-gray-600">Select your industry and role to access your dashboard</p>
      </div>

      <!-- Industry Selection -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-3">Select Industry</label>
        <select id="industry-select" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-transparent">
          <option value="">Choose your industry...</option>
          <option value="healthcare">üè• Healthcare</option>
          <option value="construction">üèóÔ∏è Construction</option>
          <option value="logistics">üöõ Logistics & Fleet</option>
          <option value="government">üèõÔ∏è Government</option>
          <option value="education">üéì Education</option>
          <option value="retail">üõí Retail</option>
          <option value="hospitality">üè® Hospitality</option>
          <option value="wellness">üí™ Wellness</option>
          <option value="beauty">üíÑ Beauty</option>
          <option value="legal">‚öñÔ∏è Legal</option>
        </select>
      </div>

      <!-- Role Selection -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-3">Select Role</label>
        <select id="role-select" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-transparent" disabled>
          <option value="">Choose your role...</option>
        </select>
      </div>

      <!-- Organization -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-3">Organization</label>
        <input 
          type="text" 
          id="organization-input" 
          placeholder="Enter your organization name"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-red focus:border-transparent"
        />
      </div>

      <!-- 2FA Authentication Notice -->
      <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="w-5 h-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-blue-800">2FA Authentication Required</h3>
            <p class="text-sm text-blue-700 mt-1">This system uses Two-Factor Authentication for secure access. You'll receive a verification code via SMS or voice call.</p>
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex space-x-4 mt-8">
        <button 
          id="cancel-auth" 
          class="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
        >
          Cancel
        </button>
        <button 
          id="login-btn" 
          class="flex-1 px-4 py-3 bg-brand-red text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          Access Dashboard
        </button>
      </div>

      <!-- Loading State -->
      <div id="auth-loading" class="hidden text-center py-4">
        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-brand-red"></div>
        <p class="text-sm text-gray-600 mt-2">Authenticating...</p>
      </div>
    </div>
  </div>
</div>

<script>
  // Industry-specific roles mapping
  const industryRoles = {
    healthcare: [
      { value: 'doctor', label: 'Doctor' },
      { value: 'nurse', label: 'Nurse' },
      { value: 'admin', label: 'Administrator' },
      { value: 'receptionist', label: 'Receptionist' }
    ],
    construction: [
      { value: 'project_manager', label: 'Project Manager' },
      { value: 'site_supervisor', label: 'Site Supervisor' },
      { value: 'safety_officer', label: 'Safety Officer' },
      { value: 'foreman', label: 'Foreman' }
    ],
    logistics: [
      { value: 'fleet_manager', label: 'Fleet Manager' },
      { value: 'dispatcher', label: 'Dispatcher' },
      { value: 'driver', label: 'Driver' },
      { value: 'operations', label: 'Operations Manager' }
    ],
    government: [
      { value: 'department_head', label: 'Department Head' },
      { value: 'citizen_services', label: 'Citizen Services' },
      { value: 'emergency_services', label: 'Emergency Services' },
      { value: 'permit_office', label: 'Permit Office' }
    ],
    education: [
      { value: 'principal', label: 'Principal' },
      { value: 'teacher', label: 'Teacher' },
      { value: 'admin', label: 'Administrator' },
      { value: 'parent', label: 'Parent' }
    ],
    retail: [
      { value: 'store_manager', label: 'Store Manager' },
      { value: 'sales_associate', label: 'Sales Associate' },
      { value: 'inventory', label: 'Inventory Manager' },
      { value: 'customer_service', label: 'Customer Service' }
    ],
    hospitality: [
      { value: 'general_manager', label: 'General Manager' },
      { value: 'front_desk', label: 'Front Desk' },
      { value: 'concierge', label: 'Concierge' },
      { value: 'guest_services', label: 'Guest Services' }
    ],
    wellness: [
      { value: 'facility_manager', label: 'Facility Manager' },
      { value: 'trainer', label: 'Trainer' },
      { value: 'nutritionist', label: 'Nutritionist' },
      { value: 'reception', label: 'Reception' }
    ],
    beauty: [
      { value: 'salon_manager', label: 'Salon Manager' },
      { value: 'stylist', label: 'Stylist' },
      { value: 'esthetician', label: 'Esthetician' },
      { value: 'reception', label: 'Reception' }
    ],
    legal: [
      { value: 'partner', label: 'Partner' },
      { value: 'associate', label: 'Associate' },
      { value: 'paralegal', label: 'Paralegal' },
      { value: 'admin', label: 'Administrator' }
    ]
  };

  // Industry dashboard mappings
  const industryDashboards = {
    healthcare: '/dashboards/healthcare',
    construction: '/dashboards/construction',
    logistics: '/dashboards/logistics',
    government: '/dashboards/government',
    education: '/dashboards/education',
    retail: '/dashboards/retail',
    hospitality: '/dashboards/hospitality',
    wellness: '/dashboards/wellness',
    beauty: '/dashboards/beauty',
    legal: '/dashboards/legal'
  };

  // Initialize authentication modal
  function initIndustryAuth() {
    const modal = document.getElementById('industry-auth-modal');
    const industrySelect = document.getElementById('industry-select');
    const roleSelect = document.getElementById('role-select');
    const authMethods = document.querySelectorAll('input[name="auth-method"]');
    const loginBtn = document.getElementById('login-btn');
    const cancelBtn = document.getElementById('cancel-auth');

    // Industry selection handler
    industrySelect?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      const industry = target?.value;
      if (roleSelect) {
        roleSelect.innerHTML = '<option value="">Choose your role...</option>';
        
        if (industry && industryRoles[industry as keyof typeof industryRoles]) {
          (roleSelect as HTMLSelectElement).disabled = false;
          industryRoles[industry as keyof typeof industryRoles].forEach((role: any) => {
            const option = document.createElement('option');
            option.value = role.value;
            option.textContent = role.label;
            roleSelect?.appendChild(option);
          });
        } else {
          (roleSelect as HTMLSelectElement).disabled = true;
        }
      }
    });

    // Note: Authentication method selection removed - using 2FA only

    // Login handler
    loginBtn?.addEventListener('click', async () => {
      const industry = (industrySelect as HTMLSelectElement)?.value;
      const role = (roleSelect as HTMLSelectElement)?.value;
      const organizationInput = document.getElementById('organization-input') as HTMLInputElement;
      const organization = organizationInput?.value;

      if (!industry || !role || !organization) {
        alert('Please fill in all required fields');
        return;
      }

      // Show loading state
      const authLoading = document.getElementById('auth-loading');
      authLoading?.classList.remove('hidden');
      (loginBtn as HTMLButtonElement).disabled = true;

      try {
        // Show 2FA modal for phone number and verification
        const twoFAResult = await show2FAModal();
        if (!twoFAResult.success) {
          throw new Error(twoFAResult.message || '2FA authentication failed');
        }

        // Store authentication data with 2FA verification
        const authData = {
          industry,
          role,
          organization,
          phoneNumber: twoFAResult.phoneNumber,
          verificationId: twoFAResult.verificationId,
          authToken: twoFAResult.token,
          authMethod: '2fa',
          timestamp: Date.now()
        };

        localStorage.setItem('tetrixAuth', JSON.stringify(authData));

        // Redirect to appropriate dashboard
        const dashboardUrl = industryDashboards[industry as keyof typeof industryDashboards];
        if (dashboardUrl) {
          window.location.href = `${dashboardUrl}?token=${twoFAResult.token}`;
        } else {
          window.location.href = `/dashboards/client?token=${twoFAResult.token}`;
        }

      } catch (error) {
        console.error('Authentication error:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        alert(`Authentication failed: ${errorMessage}. Please try again.`);
      } finally {
        const authLoading = document.getElementById('auth-loading');
        authLoading?.classList.add('hidden');
        (loginBtn as HTMLButtonElement).disabled = false;
      }
    });

    // Cancel handler
    cancelBtn?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Close modal on outside click
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });
  }

  // Global function to open industry auth modal
  window.openIndustryAuthModal = function() {
    const modal = document.getElementById('industry-auth-modal');
    if (modal) {
      modal.classList.remove('hidden');
      console.log('Industry Auth modal opened');
      
      // Debug: Test modal functionality
      if (window.industryAuthDebugger) {
        window.industryAuthDebugger.testModalFunctionality();
      }
    } else {
      console.error('Industry Auth modal element not found');
    }
  };
  
  // Also expose it immediately when script loads
  console.log('Industry Auth script loaded, openIndustryAuthModal function available');
  
  // Initialize debugger if available
  if (window.industryAuthDebugger) {
    window.industryAuthDebugger.log('IndustryAuth', 'loaded', 'Component initialized');
  }

  // 2FA Modal Integration
  async function show2FAModal() {
    return new Promise((resolve) => {
      // Set up 2FA modal result handler
      (window as any).handle2FAResult = (result: any) => {
        resolve(result);
      };
      
      // Open the 2FA modal (it will handle hiding the Industry Auth modal)
      if ((window as any).open2FAModal) {
        (window as any).open2FAModal();
      } else {
        resolve({ success: false, message: '2FA modal not available' });
      }
    });
  }

  async function initiate2FA(phoneNumber: string) {
    try {
      // Ensure phone number has proper formatting
      const formattedPhone = phoneNumber.startsWith('+') ? phoneNumber : `+${phoneNumber}`;
      
      const response = await fetch('/api/v2/2fa/initiate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phoneNumber: formattedPhone,
          method: 'sms',
          userAgent: navigator.userAgent,
          ipAddress: await getClientIP(),
          sessionId: generateSessionId()
        })
      });

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('2FA initiation error:', error);
      return { success: false, message: 'Network error during 2FA initiation' };
    }
  }

  async function verify2FACode(verificationId: string, code: string, phoneNumber: string) {
    try {
      // Ensure phone number has proper formatting
      const formattedPhone = phoneNumber.startsWith('+') ? phoneNumber : `+${phoneNumber}`;
      
      const response = await fetch('/api/v2/2fa/verify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          verificationId: verificationId,
          code: code,
          phoneNumber: formattedPhone
        })
      });

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('2FA verification error:', error);
      return { success: false, message: 'Network error during 2FA verification' };
    }
  }

  async function getClientIP() {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      return data.ip;
    } catch {
      return 'unknown';
    }
  }

  function generateSessionId() {
    return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initIndustryAuth);
</script>
