---
export interface DocSection {
  title: string;
  url: string;
  children?: DocSection[];
  isActive?: boolean;
  isExpanded?: boolean;
}

export interface Props {
  sections: DocSection[];
  currentPath: string;
}

const { sections, currentPath } = Astro.props;

function isActiveSection(section: DocSection, currentPath: string): boolean {
  if (section.url === currentPath) return true;
  if (section.children) {
    return section.children.some(child => isActiveSection(child, currentPath));
  }
  return false;
}

function renderSection(section: DocSection, level: number = 0): string {
  const isActive = isActiveSection(section, currentPath);
  const hasChildren = section.children && section.children.length > 0;
  const isExpanded = isActive || section.isExpanded;
  
  let html = `
    <li class="doc-section-item" data-url="${section.url}">
      <a 
        href="${section.url}" 
        class="doc-section-link ${isActive ? 'active' : ''} ${level > 0 ? 'pl-' + (level * 4 + 4) : ''}"
      >
        ${hasChildren ? `
          <button class="expand-btn ${isExpanded ? 'expanded' : ''}" data-section="${section.url}">
            <svg class="w-3 h-3 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        ` : ''}
        <span class="section-title">${section.title}</span>
      </a>
  `;
  
  if (hasChildren) {
    html += `
      <ul class="doc-subsection-list ${isExpanded ? 'expanded' : 'collapsed'}">
        ${section.children.map(child => renderSection(child, level + 1)).join('')}
      </ul>
    `;
  }
  
  html += '</li>';
  return html;
}
---

<aside class="doc-sidebar w-64 bg-white border-r border-gray-200 h-screen overflow-y-auto sticky top-0">
  <div class="p-4">
    <div class="mb-6">
      <h2 class="text-lg font-semibold text-brand-dark mb-2">Documentation</h2>
      <p class="text-sm text-gray-600">Find guides, API references, and tutorials</p>
    </div>
    
    <nav class="doc-navigation">
      <ul class="doc-section-list space-y-1">
        {sections.map(section => (
          <Fragment set:html={renderSection(section)} />
        ))}
      </ul>
    </nav>
  </div>
</aside>

<style>
  .doc-sidebar {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
  }
  
  .doc-sidebar::-webkit-scrollbar {
    width: 4px;
  }
  
  .doc-sidebar::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  .doc-sidebar::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 2px;
  }
  
  .doc-section-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    color: #6b7280;
    text-decoration: none;
    font-size: 0.875rem;
    transition: all 0.2s;
  }
  
  .doc-section-link:hover {
    background-color: #f3f4f6;
    color: #374151;
  }
  
  .doc-section-link.active {
    background-color: #fef3c7;
    color: #92400e;
    font-weight: 500;
  }
  
  .expand-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1rem;
    height: 1rem;
    border: none;
    background: none;
    cursor: pointer;
    color: inherit;
    transition: transform 0.2s;
  }
  
  .expand-btn.expanded {
    transform: rotate(90deg);
  }
  
  .doc-subsection-list {
    overflow: hidden;
    transition: max-height 0.3s ease-in-out;
  }
  
  .doc-subsection-list.collapsed {
    max-height: 0;
  }
  
  .doc-subsection-list.expanded {
    max-height: 1000px;
  }
  
  .section-title {
    flex: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const expandBtns = document.querySelectorAll('.expand-btn');
    
    expandBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const sectionUrl = btn.getAttribute('data-section');
        const sectionItem = btn.closest('.doc-section-item');
        const subsectionList = sectionItem?.querySelector('.doc-subsection-list');
        const isExpanded = btn.classList.contains('expanded');
        
        if (subsectionList) {
          if (isExpanded) {
            btn.classList.remove('expanded');
            subsectionList.classList.remove('expanded');
            subsectionList.classList.add('collapsed');
          } else {
            btn.classList.add('expanded');
            subsectionList.classList.remove('collapsed');
            subsectionList.classList.add('expanded');
          }
        }
      });
    });
    
    // Auto-expand sections containing active items
    const activeLinks = document.querySelectorAll('.doc-section-link.active');
    activeLinks.forEach(link => {
      const sectionItem = link.closest('.doc-section-item');
      const parentSection = sectionItem?.parentElement?.closest('.doc-section-item');
      
      if (parentSection) {
        const expandBtn = parentSection.querySelector('.expand-btn');
        const subsectionList = parentSection.querySelector('.doc-subsection-list');
        
        if (expandBtn && subsectionList) {
          expandBtn.classList.add('expanded');
          subsectionList.classList.remove('collapsed');
          subsectionList.classList.add('expanded');
        }
      }
    });
  });
</script> 