---
export interface DocItem {
  title: string;
  description: string;
  url: string;
  category: string;
  tags: string[];
}

export interface Props {
  docs: DocItem[];
}

const { docs } = Astro.props;
---

<div class="doc-search-container">
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <input
      type="text"
      id="doc-search"
      class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-brand-orange focus:border-brand-orange"
      placeholder="Search documentation..."
      autocomplete="off"
    />
  </div>
  
  <!-- Search Results -->
  <div id="search-results" class="hidden mt-4 bg-white rounded-lg shadow-lg border border-gray-200 max-h-96 overflow-y-auto">
    <div id="search-results-content" class="p-4">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<script define:vars={{ docs }}>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('doc-search');
    const searchResults = document.getElementById('search-results');
    const searchResultsContent = document.getElementById('search-results-content');
    
    if (!searchInput || !searchResults || !searchResultsContent) return;
    
    let searchTimeout;
    
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value.trim().toLowerCase();
      
      clearTimeout(searchTimeout);
      
      if (query.length < 2) {
        searchResults.classList.add('hidden');
        return;
      }
      
      searchTimeout = setTimeout(() => {
        const results = docs.filter(doc => {
          const searchText = `${doc.title} ${doc.description} ${doc.category} ${doc.tags.join(' ')}`.toLowerCase();
          return searchText.includes(query);
        });
        
        displaySearchResults(results, query);
      }, 300);
    });
    
    function displaySearchResults(results, query) {
      if (results.length === 0) {
        searchResultsContent.innerHTML = `
          <div class="text-center py-8 text-gray-500">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"></path>
            </svg>
            <p>No results found for "${query}"</p>
            <p class="text-sm mt-2">Try different keywords or browse the documentation</p>
          </div>
        `;
      } else {
        const resultsHtml = results.map(doc => `
          <a href="${doc.url}" class="block p-3 hover:bg-gray-50 rounded-lg transition-colors">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <h4 class="text-sm font-medium text-brand-dark mb-1">${highlightText(doc.title, query)}</h4>
                <p class="text-xs text-gray-600 mb-2">${highlightText(doc.description, query)}</p>
                <div class="flex items-center gap-2">
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-brand-light text-brand-dark">
                    ${doc.category}
                  </span>
                  ${doc.tags.slice(0, 2).map(tag => `
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
                      ${tag}
                    </span>
                  `).join('')}
                </div>
              </div>
              <svg class="w-4 h-4 text-gray-400 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
          </a>
        `).join('');
        
        searchResultsContent.innerHTML = resultsHtml;
      }
      
      searchResults.classList.remove('hidden');
    }
    
    function highlightText(text, query) {
      if (!query) return text;
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="bg-brand-yellow px-1 rounded">$1</mark>');
    }
    
    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
        searchResults.classList.add('hidden');
      }
    });
    
    // Keyboard navigation
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchResults.classList.add('hidden');
        searchInput.blur();
      }
    });
  });
</script>

<style>
  .doc-search-container {
    position: relative;
    z-index: 10;
  }
  
  #search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 20;
  }
  
  mark {
    background-color: #fbbf24;
    color: #1f2937;
  }
</style> 