---
// TETRIX HubSpot Integration Component
// Provides HubSpot CRM integration for industry dashboards

// Note: Service initialization moved to client-side to avoid build issues
// The component will handle data loading through JavaScript
---

<div class="hubspot-integration bg-white rounded-lg shadow-md p-6">
  <div class="flex items-center justify-between mb-6">
    <div class="flex items-center">
      <div class="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center mr-3">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
      </div>
      <div>
        <h3 class="text-lg font-semibold text-gray-900">HubSpot CRM</h3>
        <p class="text-sm text-gray-600">Connected to your HubSpot account</p>
      </div>
    </div>
    <div class="flex items-center space-x-2">
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
        Connected
      </span>
      <button class="text-gray-400 hover:text-gray-600">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
    <div class="bg-orange-50 rounded-lg p-4">
      <div class="flex items-center">
        <div class="text-2xl text-orange-600">üë•</div>
        <div class="ml-3">
          <p class="text-sm font-medium text-orange-600">Contacts</p>
          <p class="text-2xl font-semibold text-orange-900" id="hubspot-contacts-count">-</p>
        </div>
      </div>
    </div>
    <div class="bg-blue-50 rounded-lg p-4">
      <div class="flex items-center">
        <div class="text-2xl text-blue-600">üè¢</div>
        <div class="ml-3">
          <p class="text-sm font-medium text-blue-600">Companies</p>
          <p class="text-2xl font-semibold text-blue-900" id="hubspot-companies-count">-</p>
        </div>
      </div>
    </div>
    <div class="bg-green-50 rounded-lg p-4">
      <div class="flex items-center">
        <div class="text-2xl text-green-600">üíº</div>
        <div class="ml-3">
          <p class="text-sm font-medium text-green-600">Deals</p>
          <p class="text-2xl font-semibold text-green-900" id="hubspot-deals-count">-</p>
        </div>
      </div>
    </div>
    <div class="bg-purple-50 rounded-lg p-4">
      <div class="flex items-center">
        <div class="text-2xl text-purple-600">üìß</div>
        <div class="ml-3">
          <p class="text-sm font-medium text-purple-600">Emails</p>
          <p class="text-2xl font-semibold text-purple-900" id="hubspot-emails-count">-</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Marketing Performance -->
  <div class="mb-6">
    <h4 class="text-md font-semibold text-gray-900 mb-3">Marketing Performance</h4>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="bg-white border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Email Open Rate</p>
            <p class="text-2xl font-semibold text-gray-900" id="hubspot-email-open-rate">-</p>
          </div>
          <div class="text-2xl text-green-600">üìà</div>
        </div>
      </div>
      <div class="bg-white border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Click Rate</p>
            <p class="text-2xl font-semibold text-gray-900" id="hubspot-click-rate">-</p>
          </div>
          <div class="text-2xl text-blue-600">üñ±Ô∏è</div>
        </div>
      </div>
      <div class="bg-white border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Conversion Rate</p>
            <p class="text-2xl font-semibold text-gray-900" id="hubspot-conversion-rate">-</p>
          </div>
          <div class="text-2xl text-purple-600">üéØ</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Recent Activity -->
  <div class="mb-6">
    <h4 class="text-md font-semibold text-gray-900 mb-3">Recent Activity</h4>
    <div class="bg-gray-50 rounded-lg p-4">
      <div id="hubspot-recent-activity" class="space-y-3">
        <!-- Activity items will be loaded here -->
        <div class="flex items-center justify-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="bg-white border border-gray-200 rounded-lg p-4">
      <h5 class="font-medium text-gray-900 mb-3">Quick Actions</h5>
      <div class="space-y-2">
        <button 
          class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
          onclick="openHubSpotModal('contact')"
        >
          ‚ûï Create New Contact
        </button>
        <button 
          class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
          onclick="openHubSpotModal('company')"
        >
          ‚ûï Create New Company
        </button>
        <button 
          class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
          onclick="openHubSpotModal('deal')"
        >
          ‚ûï Create New Deal
        </button>
        <button 
          class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
          onclick="openHubSpotModal('email')"
        >
          ‚ûï Send Email Campaign
        </button>
      </div>
    </div>

    <div class="bg-white border border-gray-200 rounded-lg p-4">
      <h5 class="font-medium text-gray-900 mb-3">Sync Status</h5>
      <div class="space-y-2">
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Last Sync</span>
          <span class="text-sm font-medium text-gray-900" id="hubspot-last-sync">-</span>
        </div>
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Sync Status</span>
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Active
          </span>
        </div>
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Records Synced</span>
          <span class="text-sm font-medium text-gray-900" id="hubspot-synced-records">-</span>
        </div>
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Marketing Score</span>
          <span class="text-sm font-medium text-gray-900" id="hubspot-marketing-score">-</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- HubSpot Modal -->
<div id="hubspot-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="sticky top-0 bg-white border-b border-gray-200 px-6 py-4">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900" id="hubspot-modal-title">HubSpot</h3>
          <button 
            id="close-hubspot-modal" 
            class="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="p-6">
        <div id="hubspot-modal-content">
          <!-- Modal content will be loaded here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // HubSpot Integration JavaScript
  class HubSpotIntegration {
    constructor() {
      /** @type {boolean} */
      this.debug = window.location.hostname === 'localhost';
      /** @type {HTMLElement | null} */
      this.modal = null;
      /** @type {boolean} */
      this.initialized = false;
      
      if (this.debug) {
        console.log('üîß HubSpotIntegration: Constructor called');
      }
      
      // Initialize after DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.init());
      } else {
        this.init();
      }
    }

    async init() {
      try {
        if (this.debug) {
          console.log('üîß HubSpotIntegration: Initializing...');
        }
        
        // Wait for DOM elements to be available
        await this.waitForElements();
        
        await this.loadHubSpotData();
        this.bindEvents();
        
        this.initialized = true;
        
        if (this.debug) {
          console.log('‚úÖ HubSpotIntegration: Initialization complete');
        }
      } catch (error) {
        console.error('‚ùå HubSpotIntegration: Initialization failed:', error);
        this.showError('Failed to initialize HubSpot integration');
      }
    }

    async waitForElements() {
      return new Promise((resolve) => {
        const checkElements = () => {
          this.modal = document.getElementById('hubspot-modal');
          
          if (this.modal) {
            if (this.debug) {
              console.log('‚úÖ HubSpotIntegration: Modal element found');
            }
            resolve();
          } else {
            if (this.debug) {
              console.log('‚è≥ HubSpotIntegration: Waiting for modal element...');
            }
            setTimeout(checkElements, 100);
          }
        };
        
        checkElements();
      });
    }

    bindEvents() {
      // Close modal
      document.getElementById('close-hubspot-modal')?.addEventListener('click', () => {
        this.closeModal();
      });

      // Close on backdrop click
      this.modal?.addEventListener('click', (/** @type {Event} */ e) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });
    }

    async loadHubSpotData() {
      try {
        if (this.debug) {
          console.log('üîß HubSpotIntegration: Loading data...');
        }
        
        // Load counts
        await this.loadCounts();
        
        // Load marketing metrics
        await this.loadMarketingMetrics();
        
        // Load recent activity
        await this.loadRecentActivity();
        
        // Update sync status
        this.updateSyncStatus();
        
        if (this.debug) {
          console.log('‚úÖ HubSpotIntegration: Data loaded successfully');
        }
      } catch (error) {
        console.error('‚ùå HubSpotIntegration: Failed to load data:', error);
        this.showError('Failed to load HubSpot data');
      }
    }

    async loadCounts() {
      try {
        if (this.debug) {
          console.log('üîß HubSpotIntegration: Loading counts...');
        }
        
        // Simulate API calls to HubSpot
        const counts = {
          contacts: Math.floor(Math.random() * 2000) + 1000,
          companies: Math.floor(Math.random() * 500) + 200,
          deals: Math.floor(Math.random() * 300) + 100,
          emails: Math.floor(Math.random() * 5000) + 2000
        };

        // Update DOM elements with error checking
        this.updateElement('hubspot-contacts-count', counts.contacts.toLocaleString());
        this.updateElement('hubspot-companies-count', counts.companies.toLocaleString());
        this.updateElement('hubspot-deals-count', counts.deals.toLocaleString());
        this.updateElement('hubspot-emails-count', counts.emails.toLocaleString());
        
        if (this.debug) {
          console.log('‚úÖ HubSpotIntegration: Counts loaded:', counts);
        }
      } catch (error) {
        console.error('‚ùå HubSpotIntegration: Failed to load counts:', error);
        this.showError('Failed to load contact counts');
      }
    }

    async loadMarketingMetrics() {
      try {
        // Simulate marketing metrics
        const metrics = {
          emailOpenRate: (Math.random() * 10 + 20).toFixed(1) + '%',
          clickRate: (Math.random() * 5 + 2).toFixed(1) + '%',
          conversionRate: (Math.random() * 3 + 1).toFixed(1) + '%'
        };

        document.getElementById('hubspot-email-open-rate').textContent = metrics.emailOpenRate;
        document.getElementById('hubspot-click-rate').textContent = metrics.clickRate;
        document.getElementById('hubspot-conversion-rate').textContent = metrics.conversionRate;
      } catch (error) {
        console.error('Failed to load marketing metrics:', error);
      }
    }

    async loadRecentActivity() {
      try {
        const activityContainer = document.getElementById('hubspot-recent-activity');
        
        // Simulate recent activity data
        const activities = [
          { type: 'contact', action: 'Created', name: 'Sarah Johnson', time: '1 hour ago' },
          { type: 'deal', action: 'Won', name: 'Enterprise Contract', time: '3 hours ago' },
          { type: 'email', action: 'Sent', name: 'Newsletter Campaign', time: '5 hours ago' },
          { type: 'company', action: 'Updated', name: 'TechCorp Inc', time: '1 day ago' }
        ];

        activityContainer.innerHTML = activities.map(activity => `
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
              <span class="text-orange-600 text-sm">${this.getActivityIcon(activity.type)}</span>
            </div>
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-900">${activity.action} ${activity.name}</p>
              <p class="text-xs text-gray-500">${activity.time}</p>
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Failed to load recent activity:', error);
      }
    }

    getActivityIcon(type) {
      const icons = {
        contact: 'üë§',
        deal: 'üíº',
        email: 'üìß',
        company: 'üè¢'
      };
      return icons[type] || 'üìÑ';
    }

    updateSyncStatus() {
      const now = new Date();
      document.getElementById('hubspot-last-sync').textContent = now.toLocaleTimeString();
      document.getElementById('hubspot-synced-records').textContent = '2,847';
      document.getElementById('hubspot-marketing-score').textContent = '85/100';
    }

    /** @param {string} type */
    openModal(type) {
      const titles = {
        contact: 'Create New Contact',
        company: 'Create New Company',
        deal: 'Create New Deal',
        email: 'Send Email Campaign'
      };

      const titleEl = document.getElementById('hubspot-modal-title');
      const contentEl = document.getElementById('hubspot-modal-content');
      
      if (titleEl) titleEl.textContent = titles[type] || 'HubSpot';
      if (contentEl) contentEl.innerHTML = this.getModalContent(type);
      if (this.modal) this.modal.classList.remove('hidden');
    }

    /** @param {string} type */
    getModalContent(type) {
      const forms = {
        contact: `
          <form class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input type="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
              <input type="tel" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Company</label>
              <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Lifecycle Stage</label>
              <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
                <option>Subscriber</option>
                <option>Lead</option>
                <option>Marketing Qualified Lead</option>
                <option>Sales Qualified Lead</option>
                <option>Opportunity</option>
                <option>Customer</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button type="button" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200" onclick="closeHubSpotModal()">
                Cancel
              </button>
              <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-orange-600 rounded-md hover:bg-orange-700">
                Create Contact
              </button>
            </div>
          </form>
        `,
        deal: `
          <form class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Deal Name</label>
              <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
              <input type="number" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Deal Stage</label>
              <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
                <option>Appointment Scheduled</option>
                <option>Qualified To Buy</option>
                <option>Presentation Scheduled</option>
                <option>Decision Maker Bought-In</option>
                <option>Contract Sent</option>
                <option>Closed Won</option>
                <option>Closed Lost</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Close Date</label>
              <input type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" required>
            </div>
            <div class="flex justify-end space-x-3">
              <button type="button" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200" onclick="closeHubSpotModal()">
                Cancel
              </button>
              <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-orange-600 rounded-md hover:bg-orange-700">
                Create Deal
              </button>
            </div>
          </form>
        `
      };

      return forms[type] || '<p>Form not available</p>';
    }

    closeModal() {
      if (this.modal) {
        this.modal.classList.add('hidden');
      }
    }

    // Utility methods
    /** @param {string} id @param {string} value */
    updateElement(id, value) {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      } else if (this.debug) {
        console.warn(`‚ö†Ô∏è HubSpotIntegration: Element not found: ${id}`);
      }
    }

    /** @param {string} message */
    showError(message) {
      console.error(`‚ùå HubSpotIntegration: ${message}`);
      // You could add a toast notification or error display here
    }

    getStatus() {
      return {
        initialized: this.initialized,
        modal: !!this.modal,
        debug: this.debug
      };
    }
  }

  // Initialize HubSpot integration with error handling
  function initializeHubSpotIntegration() {
    try {
      if (window.hubspotIntegration) {
        console.warn('‚ö†Ô∏è HubSpotIntegration: Already initialized');
        return;
      }
      
      window.hubspotIntegration = new HubSpotIntegration();
      
      // Global functions with error handling
      window.openHubSpotModal = (/** @type {string} */ type) => {
        try {
          if (window.hubspotIntegration?.openModal) {
            window.hubspotIntegration.openModal(type);
          } else {
            console.error('‚ùå HubSpotIntegration: Not initialized or openModal method not available');
          }
        } catch (error) {
          console.error('‚ùå HubSpotIntegration: Error opening modal:', error);
        }
      };

      window.closeHubSpotModal = () => {
        try {
          if (window.hubspotIntegration?.closeModal) {
            window.hubspotIntegration.closeModal();
          } else {
            console.error('‚ùå HubSpotIntegration: Not initialized or closeModal method not available');
          }
        } catch (error) {
          console.error('‚ùå HubSpotIntegration: Error closing modal:', error);
        }
      };
      
      console.log('‚úÖ HubSpotIntegration: Global functions registered');
    } catch (error) {
      console.error('‚ùå HubSpotIntegration: Failed to initialize:', error);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeHubSpotIntegration);
  } else {
    initializeHubSpotIntegration();
  }
</script>
