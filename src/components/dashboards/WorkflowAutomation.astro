---
// TETRIX Workflow Automation Component
// Provides automated workflow management for industry-specific dashboards

import { IndustryWorkflowIntegrations } from '../../services/workflows/IndustryWorkflowIntegrations';

// Initialize workflow integrations
const workflowIntegrations = new IndustryWorkflowIntegrations();

// Get industry from URL or props
const industry = Astro.params.industry || 'healthcare';
const workflowIntegration = workflowIntegrations.getIndustryWorkflowIntegration(industry);
const availableWorkflows = workflowIntegrations.getAvailableWorkflowsForIndustry(industry);
const crmIntegrations = workflowIntegrations.getCRMIntegrationsForIndustry(industry);
const backendServices = workflowIntegrations.getBackendServicesForIndustry(industry);
---

<div class="workflow-automation bg-white rounded-lg shadow-md p-6">
  <div class="flex items-center justify-between mb-6">
    <div class="flex items-center">
      <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
      </div>
      <div>
        <h3 class="text-lg font-semibold text-gray-900">Workflow Automation</h3>
        <p class="text-sm text-gray-600">Automate business processes with intelligent workflows</p>
      </div>
    </div>
    <button 
      id="create-workflow-btn"
      class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
    >
      Create Workflow
    </button>
  </div>

  <!-- Available Workflows -->
  <div class="mb-8">
    <h4 class="text-md font-semibold text-gray-900 mb-4">Available Workflows</h4>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {availableWorkflows.map(workflow => (
        <div class="workflow-card bg-gray-50 rounded-lg p-4 border border-gray-200 hover:border-blue-300 transition-colors cursor-pointer" 
             data-workflow-id={workflow.id}>
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <h5 class="font-medium text-gray-900 mb-1">{workflow.name}</h5>
              <p class="text-sm text-gray-600 mb-2">{workflow.department}</p>
              <p class="text-xs text-gray-500">{workflow.pain_point}</p>
            </div>
            <div class="text-2xl">
              {workflow.department === 'Finance & Accounting' && 'üí∞'}
              {workflow.department === 'Human Resources' && 'üë•'}
              {workflow.department === 'Marketing & Sales' && 'üìà'}
              {workflow.department === 'Information Technology' && 'üíª'}
              {workflow.department === 'Operations & Administration' && '‚öôÔ∏è'}
              {workflow.department === 'Legal & Administration' && '‚öñÔ∏è'}
            </div>
          </div>
          
          <div class="mb-3">
            <div class="text-xs text-gray-500 mb-1">Key Agents:</div>
            <div class="flex flex-wrap gap-1">
              {workflow.key_agents.map(agent => (
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {agent.name}
                </span>
              ))}
            </div>
          </div>

          <div class="mb-3">
            <div class="text-xs text-gray-500 mb-1">Workflow Steps:</div>
            <div class="text-sm text-gray-700">
              {workflow.workflow_steps.length} automated steps
            </div>
          </div>

          <div class="mb-3">
            <div class="text-xs text-gray-500 mb-1">Human Checkpoints:</div>
            <div class="text-sm text-gray-700">
              {workflow.hitl_checkpoints.length} approval points
            </div>
          </div>

          <button 
            class="w-full bg-blue-600 text-white py-2 px-3 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-sm"
            onclick={`startWorkflow('${workflow.id}')`}
          >
            Start Workflow
          </button>
        </div>
      ))}
    </div>
  </div>

  <!-- CRM Integrations -->
  <div class="mb-8">
    <h4 class="text-md font-semibold text-gray-900 mb-4">CRM Integrations</h4>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {crmIntegrations.map(integration => (
        <div class="integration-card bg-white border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
          <div class="flex items-center justify-between mb-2">
            <h5 class="font-medium text-gray-900">{integration}</h5>
            <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
              <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
              </svg>
            </div>
          </div>
          <p class="text-sm text-gray-600">Connected and ready for automation</p>
        </div>
      ))}
    </div>
  </div>

  <!-- Backend Services -->
  <div class="mb-8">
    <h4 class="text-md font-semibold text-gray-900 mb-4">Backend Services</h4>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      {backendServices.map(service => (
        <div class="service-card bg-white border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
          <div class="flex items-center justify-between mb-2">
            <h5 class="font-medium text-gray-900 text-sm">{service}</h5>
            <div class="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
              <svg class="w-3 h-3 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            </div>
          </div>
          <p class="text-xs text-gray-600">Active</p>
        </div>
      ))}
    </div>
  </div>

  <!-- Active Workflows -->
  <div class="mb-8">
    <h4 class="text-md font-semibold text-gray-900 mb-4">Active Workflows</h4>
    <div id="active-workflows" class="space-y-4">
      <!-- Active workflows will be loaded here -->
    </div>
  </div>

  <!-- Workflow Analytics -->
  <div class="mb-8">
    <h4 class="text-md font-semibold text-gray-900 mb-4">Workflow Analytics</h4>
    <div id="workflow-analytics" class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <!-- Analytics will be loaded here -->
    </div>
  </div>
</div>

<script>
  // Workflow Automation JavaScript
  class WorkflowAutomation {
    constructor() {
      this.industry = '{industry}';
      this.workflowIntegrations = null;
      this.init();
    }

    async init() {
      // Initialize workflow integrations
      this.workflowIntegrations = new IndustryWorkflowIntegrations();
      
      // Load active workflows
      await this.loadActiveWorkflows();
      
      // Load workflow analytics
      await this.loadWorkflowAnalytics();
      
      // Bind events
      this.bindEvents();
    }

    bindEvents() {
      // Create workflow button
      document.getElementById('create-workflow-btn')?.addEventListener('click', () => {
        this.showCreateWorkflowModal();
      });

      // Workflow card clicks
      document.querySelectorAll('.workflow-card').forEach(card => {
        card.addEventListener('click', (e) => {
          const workflowId = card.getAttribute('data-workflow-id');
          if (workflowId) {
            this.showWorkflowDetails(workflowId);
          }
        });
      });
    }

    async startWorkflow(workflowId) {
      try {
        console.log(`Starting workflow: ${workflowId} for industry: ${this.industry}`);
        
        // Show loading state
        this.showLoadingState();
        
        // Start workflow execution
        const execution = await this.workflowIntegrations.startIndustryWorkflow(
          this.industry,
          workflowId,
          {
            initiatedBy: 'user',
            timestamp: new Date().toISOString(),
            industry: this.industry
          }
        );
        
        console.log('Workflow started:', execution);
        
        // Show success message
        this.showSuccessMessage(`Workflow "${workflowId}" started successfully`);
        
        // Refresh active workflows
        await this.loadActiveWorkflows();
        
      } catch (error) {
        console.error('Failed to start workflow:', error);
        this.showErrorMessage(`Failed to start workflow: ${error.message}`);
      }
    }

    async loadActiveWorkflows() {
      try {
        const activeWorkflows = this.workflowIntegrations.workflowEngine.getWorkflowExecutionsByStatus('running');
        const pausedWorkflows = this.workflowIntegrations.workflowEngine.getWorkflowExecutionsByStatus('paused');
        const allActiveWorkflows = [...activeWorkflows, ...pausedWorkflows];
        
        const container = document.getElementById('active-workflows');
        if (!container) return;
        
        if (allActiveWorkflows.length === 0) {
          container.innerHTML = `
            <div class="text-center py-8 text-gray-500">
              <div class="text-4xl mb-4">ü§ñ</div>
              <p>No active workflows</p>
              <p class="text-sm">Start a workflow to see it here</p>
            </div>
          `;
          return;
        }
        
        container.innerHTML = allActiveWorkflows.map(execution => `
          <div class="workflow-execution bg-white border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between mb-3">
              <div>
                <h5 class="font-medium text-gray-900">${execution.templateId}</h5>
                <p class="text-sm text-gray-600">Started: ${new Date(execution.startedAt).toLocaleString()}</p>
              </div>
              <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  execution.status === 'running' ? 'bg-green-100 text-green-800' :
                  execution.status === 'paused' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-gray-100 text-gray-800'
                }">
                  ${execution.status}
                </span>
                <button class="text-gray-400 hover:text-gray-600" onclick="viewWorkflowDetails('${execution.id}')">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <div class="mb-3">
              <div class="text-sm text-gray-600 mb-1">Progress:</div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" style="width: ${(execution.currentStep / 5) * 100}%"></div>
              </div>
              <div class="text-xs text-gray-500 mt-1">Step ${execution.currentStep} of 5</div>
            </div>
            
            <div class="mb-3">
              <div class="text-sm text-gray-600 mb-1">Checkpoints:</div>
              <div class="flex flex-wrap gap-1">
                ${execution.checkpoints.map(cp => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                    cp.status === 'approved' ? 'bg-green-100 text-green-800' :
                    cp.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }">
                    ${cp.checkpoint}
                  </span>
                `).join('')}
              </div>
            </div>
            
            <div class="flex space-x-2">
              ${execution.status === 'paused' ? `
                <button class="bg-green-600 text-white py-1 px-3 rounded text-sm hover:bg-green-700" onclick="approveCheckpoint('${execution.id}')">
                  Approve
                </button>
              ` : ''}
              <button class="bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700" onclick="viewWorkflowDetails('${execution.id}')">
                View Details
              </button>
            </div>
          </div>
        `).join('');
        
      } catch (error) {
        console.error('Failed to load active workflows:', error);
      }
    }

    async loadWorkflowAnalytics() {
      try {
        const analytics = this.workflowIntegrations.getWorkflowAnalytics(this.industry);
        
        const container = document.getElementById('workflow-analytics');
        if (!container) return;
        
        container.innerHTML = `
          <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="text-2xl font-bold text-gray-900">${analytics.totalWorkflows}</div>
            <div class="text-sm text-gray-600">Total Workflows</div>
          </div>
          <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="text-2xl font-bold text-green-600">${analytics.completedWorkflows}</div>
            <div class="text-sm text-gray-600">Completed</div>
          </div>
          <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="text-2xl font-bold text-red-600">${analytics.failedWorkflows}</div>
            <div class="text-sm text-gray-600">Failed</div>
          </div>
          <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="text-2xl font-bold text-blue-600">${Math.round(analytics.averageCompletionTime / 1000 / 60)}m</div>
            <div class="text-sm text-gray-600">Avg. Time</div>
          </div>
        `;
        
      } catch (error) {
        console.error('Failed to load workflow analytics:', error);
      }
    }

    showCreateWorkflowModal() {
      // Show create workflow modal
      alert('Create Workflow modal would open here');
    }

    showWorkflowDetails(workflowId) {
      // Show workflow details modal
      alert(`Workflow details for ${workflowId} would open here`);
    }

    showLoadingState() {
      // Show loading state
      console.log('Showing loading state...');
    }

    showSuccessMessage(message) {
      // Show success message
      console.log('Success:', message);
    }

    showErrorMessage(message) {
      // Show error message
      console.error('Error:', message);
    }
  }

  // Global functions for workflow actions
  window.startWorkflow = function(workflowId) {
    window.workflowAutomation.startWorkflow(workflowId);
  };

  window.viewWorkflowDetails = function(executionId) {
    console.log('View workflow details:', executionId);
  };

  window.approveCheckpoint = function(executionId) {
    console.log('Approve checkpoint:', executionId);
  };

  // Initialize workflow automation
  document.addEventListener('DOMContentLoaded', () => {
    window.workflowAutomation = new WorkflowAutomation();
  });
</script>
