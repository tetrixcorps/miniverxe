---
export interface Props {
  title: string;
  excerpt: string;
  author: string;
  publishDate: string;
  lastUpdated?: string;
  readTime: number;
  category: string;
  slug: string;
  featured?: boolean;
  image: string;
  funnelStage?: string;
}

const { 
  title, 
  excerpt, 
  author, 
  publishDate, 
  lastUpdated, 
  readTime, 
  category, 
  slug, 
  featured = false,
  image,
  funnelStage = "awareness"
} = Astro.props;

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const getCategoryColor = (category: string) => {
  const colors = {
    'Case Studies': 'bg-blue-100 text-blue-800',
    'Industry Insights': 'bg-green-100 text-green-800',
    'Product Comparison': 'bg-purple-100 text-purple-800',
    'Implementation': 'bg-orange-100 text-orange-800',
    'ROI Analysis': 'bg-red-100 text-red-800',
    'Success Stories': 'bg-indigo-100 text-indigo-800'
  };
  return colors[category] || 'bg-gray-100 text-gray-800';
};
---

<article class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 group">
  <!-- Featured Badge -->
  {featured && (
    <div class="absolute top-4 left-4 z-10">
      <span class="bg-brand-orange text-white px-3 py-1 rounded-full text-sm font-medium">
        Featured
      </span>
    </div>
  )}
  
  <!-- Image -->
  <div class="relative h-48 overflow-hidden">
    <img 
      src={image} 
      alt={title}
      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
  </div>
  
  <!-- Content -->
  <div class="p-6">
    <!-- Category and Read Time -->
    <div class="flex items-center justify-between mb-3">
      <span class={`px-3 py-1 rounded-full text-xs font-medium ${getCategoryColor(category)}`}>
        {category}
      </span>
      <span class="text-gray-500 text-sm flex items-center">
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        {readTime} min read
      </span>
    </div>
    
    <!-- Title -->
    <h3 class="text-xl font-heading font-bold text-gray-900 mb-3 line-clamp-2 group-hover:text-brand-orange transition-colors">
      <a href={`/blog/${slug}`} class="hover:underline">
        {title}
      </a>
    </h3>
    
    <!-- Excerpt -->
    <p class="text-gray-600 mb-4 line-clamp-3">
      {excerpt}
    </p>
    
    <!-- Author and Date -->
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <div class="w-8 h-8 bg-brand-orange rounded-full flex items-center justify-center text-white font-medium text-sm">
          {author.split(' ').map(n => n[0]).join('')}
        </div>
        <div class="ml-3">
          <p class="text-sm font-medium text-gray-900">{author}</p>
          <p class="text-xs text-gray-500">
            {formatDate(publishDate)}
            {lastUpdated && lastUpdated !== publishDate && (
              <span class="ml-1">&#8226; Updated {formatDate(lastUpdated)}</span>
            )}
          </p>
        </div>
      </div>
      
      <!-- Funnel Stage Indicator -->
      <div class="text-right">
        <span class={`inline-block px-2 py-1 rounded text-xs font-medium ${
          funnelStage === 'awareness' ? 'bg-blue-100 text-blue-800' :
          funnelStage === 'consideration' ? 'bg-yellow-100 text-yellow-800' :
          'bg-green-100 text-green-800'
        }`}>
          {funnelStage.charAt(0).toUpperCase() + funnelStage.slice(1)}
        </span>
      </div>
    </div>
  </div>
  
  <!-- Hover Effect -->
  <div class="absolute inset-0 border-2 border-transparent group-hover:border-brand-orange rounded-xl transition-colors duration-300 pointer-events-none"></div>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 