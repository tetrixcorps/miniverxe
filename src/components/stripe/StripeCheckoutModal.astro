---
// Stripe Checkout Modal Component
// Handles embedded Stripe Checkout for 7-day trials with card-on-file requirement

export interface Props {
  priceId: string;
  serviceType: 'healthcare' | 'construction' | 'logistics';
  planName: string;
  basePrice: number;
  perUnitPrice?: number;
  period: string;
  features: string[];
  trialDays: number;
  successUrl: string;
  cancelUrl: string;
}

const {
  priceId,
  serviceType,
  planName,
  basePrice,
  perUnitPrice,
  period,
  features,
  trialDays,
  successUrl,
  cancelUrl
} = Astro.props;

const serviceIcons = {
  healthcare: 'üè•',
  construction: 'üèóÔ∏è',
  logistics: 'üöõ'
};

const serviceColors = {
  healthcare: 'from-green-500 to-emerald-600',
  construction: 'from-orange-500 to-amber-600',
  logistics: 'from-blue-500 to-indigo-600'
};
---

<div id="stripe-checkout-modal" 
     class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden"
     data-price-id={priceId}
     data-service-type={serviceType}
     data-trial-days={trialDays}
     data-success-url={successUrl}
     data-cancel-url={cancelUrl}>
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
      <!-- Modal Header -->
      <div class={`bg-gradient-to-r ${serviceColors[serviceType]} p-6 text-white`}>
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <div class="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
              <span class="text-2xl">{serviceIcons[serviceType]}</span>
            </div>
            <div>
              <h2 class="text-2xl font-bold">Start Your Free Trial</h2>
              <p class="text-white/90 text-sm">{planName} - {serviceType.charAt(0).toUpperCase() + serviceType.slice(1)}</p>
            </div>
          </div>
          <button id="close-checkout-modal" class="text-white hover:text-white/80 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="p-6">
        <!-- Trial Information -->
        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 mb-6">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
              <span class="text-blue-600 text-lg">üéâ</span>
            </div>
            <div>
              <h3 class="font-semibold text-gray-900">7-Day Free Trial</h3>
              <p class="text-sm text-gray-600">
                No charges during trial. Payment method required to start.
              </p>
            </div>
          </div>
        </div>

        <!-- Pricing Display -->
        <div class="bg-gray-50 rounded-lg p-4 mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-semibold text-gray-900">{planName}</h4>
              <p class="text-sm text-gray-600">{period}</p>
            </div>
            <div class="text-right">
              <div class="text-2xl font-bold text-gray-900">
                ${basePrice}
                {perUnitPrice && <span class="text-sm font-normal text-gray-500">+ ${perUnitPrice}/unit</span>}
              </div>
              <div class="text-sm text-gray-500">After trial</div>
            </div>
          </div>
        </div>

        <!-- Features List -->
        <div class="mb-6">
          <h4 class="font-semibold text-gray-900 mb-3">What's included:</h4>
          <ul class="space-y-2">
            {features.map((feature, index) => (
              <li class="flex items-start space-x-2">
                <div class="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center mt-0.5 flex-shrink-0">
                  <svg class="w-3 h-3 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                <span class="text-sm text-gray-700">{feature}</span>
              </li>
            ))}
          </ul>
        </div>

        <!-- User Information Form -->
        <form id="checkout-form" class="space-y-4 mb-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="user-name" class="block text-sm font-medium text-gray-700 mb-1">
                Full Name *
              </label>
              <input 
                type="text" 
                id="user-name" 
                name="name"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your full name"
              >
            </div>
            <div>
              <label for="user-email" class="block text-sm font-medium text-gray-700 mb-1">
                Email Address *
              </label>
              <input 
                type="email" 
                id="user-email" 
                name="email"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your email"
              >
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="user-phone" class="block text-sm font-medium text-gray-700 mb-1">
                Phone Number *
              </label>
              <input 
                type="tel" 
                id="user-phone" 
                name="phone"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="+1 (555) 123-4567"
              >
            </div>
            <div>
              <label for="organization" class="block text-sm font-medium text-gray-700 mb-1">
                Organization
              </label>
              <input 
                type="text" 
                id="organization" 
                name="organization"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Your company name"
              >
            </div>
          </div>
        </form>

        <!-- Stripe Checkout Container -->
        <div id="stripe-checkout-container" class="mb-6">
          <!-- Stripe Elements will be mounted here -->
        </div>

        <!-- Action Buttons -->
        <div class="flex space-x-4">
          <button 
            id="start-trial-btn" 
            class="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="trial-btn-text">Start 7-Day Free Trial</span>
            <div id="trial-btn-spinner" class="hidden">
              <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
            </div>
          </button>
          <button 
            id="cancel-checkout-btn" 
            class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
        </div>

        <!-- Security Notice -->
        <div class="mt-4 text-center">
          <p class="text-xs text-gray-500">
            üîí Secure payment processing by Stripe. Your payment information is encrypted and secure.
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class StripeCheckoutModal {
    modal: HTMLElement | null;
    form: HTMLFormElement | null;
    startTrialBtn: HTMLButtonElement | null;
    cancelBtn: HTMLButtonElement | null;
    closeBtn: HTMLElement | null;
    checkoutContainer: HTMLElement | null;
    priceId: string;
    serviceType: string;
    trialDays: number;
    successUrl: string;
    cancelUrl: string;

    constructor() {
      this.modal = document.getElementById('stripe-checkout-modal');
      this.form = document.getElementById('checkout-form') as HTMLFormElement;
      this.startTrialBtn = document.getElementById('start-trial-btn') as HTMLButtonElement;
      this.cancelBtn = document.getElementById('cancel-checkout-btn') as HTMLButtonElement;
      this.closeBtn = document.getElementById('close-checkout-modal');
      this.checkoutContainer = document.getElementById('stripe-checkout-container');
      
      this.priceId = this.modal?.dataset.priceId || '';
      this.serviceType = this.modal?.dataset.serviceType || '';
      this.trialDays = parseInt(this.modal?.dataset.trialDays || '7');
      this.successUrl = this.modal?.dataset.successUrl || '';
      this.cancelUrl = this.modal?.dataset.cancelUrl || '';
      
      this.initializeEventListeners();
    }

    initializeEventListeners() {
      // Close modal events
      this.closeBtn?.addEventListener('click', () => this.closeModal());
      this.cancelBtn?.addEventListener('click', () => this.closeModal());
      
      // Click outside to close
      this.modal?.addEventListener('click', (e: Event) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });

      // Start trial button
      this.startTrialBtn?.addEventListener('click', () => this.startTrial());
    }

    async startTrial() {
      try {
        this.setLoading(true);
        
        // Get form data
        const formData = new FormData(this.form!);
        const userData = {
          name: formData.get('name') as string,
          email: formData.get('email') as string,
          phone: formData.get('phone') as string,
          organization: (formData.get('organization') as string) || ''
        };

        // Validate form
        if (!userData.name || !userData.email || !userData.phone) {
          alert('Please fill in all required fields');
          return;
        }

        // Create checkout session
        const response = await fetch('/api/stripe/create-checkout-session', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            priceId: this.priceId,
            user: userData,
            serviceType: this.serviceType,
            trialDays: this.trialDays,
            successUrl: this.successUrl,
            cancelUrl: this.cancelUrl
          })
        });

        const result = await response.json();

        if (result.success) {
          // Redirect to Stripe Checkout
          window.location.href = result.checkoutUrl;
        } else {
          alert('Failed to start trial: ' + result.error);
        }

      } catch (error) {
        console.error('Error starting trial:', error);
        alert('An error occurred. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading: boolean) {
      if (loading) {
        this.startTrialBtn!.disabled = true;
        document.getElementById('trial-btn-text')!.classList.add('hidden');
        document.getElementById('trial-btn-spinner')!.classList.remove('hidden');
      } else {
        this.startTrialBtn!.disabled = false;
        document.getElementById('trial-btn-text')!.classList.remove('hidden');
        document.getElementById('trial-btn-spinner')!.classList.add('hidden');
      }
    }

    openModal() {
      this.modal?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }

    closeModal() {
      this.modal?.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }

  // Initialize modal when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    (window as any).stripeCheckoutModal = new StripeCheckoutModal();
  });

  // Global function to open checkout modal
  (window as any).openStripeCheckout = function(priceId: string, serviceType: string, planName: string, basePrice: number, perUnitPrice: string, period: string, features: string[], trialDays: number, successUrl: string, cancelUrl: string) {
    // Update modal content dynamically
    const titleElement = document.querySelector('#stripe-checkout-modal h2');
    const subtitleElement = document.querySelector('#stripe-checkout-modal .text-white\\/90');
    const featuresList = document.querySelector('#stripe-checkout-modal ul');
    const pricingElement = document.querySelector('#stripe-checkout-modal .text-2xl');
    
    if (titleElement) titleElement.textContent = `Start Your Free Trial - ${planName}`;
    if (subtitleElement) subtitleElement.textContent = `${serviceType.charAt(0).toUpperCase() + serviceType.slice(1)}`;
    
    // Update features list
    if (featuresList) {
      featuresList.innerHTML = features.map((feature: string) => `
        <li class="flex items-start space-x-2">
          <div class="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center mt-0.5 flex-shrink-0">
            <svg class="w-3 h-3 text-green-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <span class="text-sm text-gray-700">${feature}</span>
        </li>
      `).join('');
    }

    // Update pricing
    if (pricingElement) {
      pricingElement.innerHTML = `$${basePrice}${perUnitPrice ? `<span class="text-sm font-normal text-gray-500">+ $${perUnitPrice}/unit</span>` : ''}`;
    }

    // Update modal instance properties
    (window as any).stripeCheckoutModal.priceId = priceId;
    (window as any).stripeCheckoutModal.serviceType = serviceType;
    (window as any).stripeCheckoutModal.trialDays = trialDays;
    (window as any).stripeCheckoutModal.successUrl = successUrl;
    (window as any).stripeCheckoutModal.cancelUrl = cancelUrl;

    // Open modal
    (window as any).stripeCheckoutModal.openModal();
  };
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style>