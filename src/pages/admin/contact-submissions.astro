---
import MainLayout from '../../components/layout/MainLayout.astro';
import { getContactSubmissions } from '../../lib/firebase.js';

// In a real app, you'd add authentication here
// For now, this is a simple admin panel

let submissions = [];
let error = null;

try {
  submissions = await getContactSubmissions();
} catch (err) {
  error = err.message;
}

const formatDate = (timestamp) => {
  if (!timestamp) return 'N/A';
  return new Date(timestamp.seconds * 1000).toLocaleString();
};

const hasError = !!error;
const hasSubmissions = submissions.length > 0;
const newCount = submissions.filter(s => s.status === 'new').length;
const contactedCount = submissions.filter(s => s.status === 'contacted').length;

let errorBlock = '';
if (hasError) {
  errorBlock = `<div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-red-800">Error loading submissions</h3>
        <div class="mt-2 text-sm text-red-700">
          <p>${error}</p>
        </div>
      </div>
    </div>
  </div>`;
}

let emptyBlock = '';
if (!hasError && !hasSubmissions) {
  emptyBlock = `<div class="text-center py-12">
    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
    <h3 class="mt-2 text-sm font-medium text-gray-900">No submissions yet</h3>
    <p class="mt-1 text-sm text-gray-500">Contact form submissions will appear here once users start submitting forms.</p>
  </div>`;
}

let tableRows = '';
if (!hasError && hasSubmissions) {
  tableRows = submissions.map(submission => `
    <tr class="hover:bg-gray-50">
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatDate(submission.timestamp)}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${submission.name}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        <a href="mailto:${submission.email}" class="text-brand-orange hover:text-brand-red">${submission.email}</a>
      </td>
      <td class="px-6 py-4 text-sm text-gray-900 max-w-xs">
        <div class="truncate" title="${submission.message}">${submission.message}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
          submission.status === 'new' ? 'bg-yellow-100 text-yellow-800' :
          submission.status === 'contacted' ? 'bg-green-100 text-green-800' :
          'bg-gray-100 text-gray-800'}">
          ${submission.status}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        <button class="text-brand-orange hover:text-brand-red mr-3" data-id="${submission.id}">Mark Contacted</button>
        <button class="text-red-600 hover:text-red-800" data-id="${submission.id}">Delete</button>
      </td>
    </tr>
  `).join('');
}

let tableBlock = '';
if (!hasError && hasSubmissions) {
  tableBlock = `<div class="bg-white rounded-lg shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          ${tableRows}
        </tbody>
      </table>
    </div>
  </div>`;
}

let statsBlock = '';
if (!hasError && hasSubmissions) {
  statsBlock = `<div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-lg shadow-sm p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-8 w-8 text-brand-orange" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Total Submissions</p>
          <p class="text-2xl font-semibold text-gray-900">${submissions.length}</p>
        </div>
      </div>
    </div>
    <div class="bg-white rounded-lg shadow-sm p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-8 w-8 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">New</p>
          <p class="text-2xl font-semibold text-gray-900">${newCount}</p>
        </div>
      </div>
    </div>
    <div class="bg-white rounded-lg shadow-sm p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-8 w-8 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Contacted</p>
          <p class="text-2xl font-semibold text-gray-900">${contactedCount}</p>
        </div>
      </div>
    </div>
  </div>`;
}
---

<MainLayout>
  <div>Test</div>
</MainLayout>

<style>
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const authCheck = document.getElementById('auth-check');
    const adminContent = document.getElementById('admin-content');
    const logoutBtn = document.getElementById('logout-btn');
    const loginStatus = document.getElementById('login-status');

    // Check authentication
    function checkAuth() {
      let isAuthenticated = sessionStorage.getItem('adminAuthenticated') === 'true';
      const loginTime = parseInt(sessionStorage.getItem('adminLoginTime') || '0');
      const now = Date.now();
      const sessionTimeout = 8 * 60 * 60 * 1000; // 8 hours

      // Check if session has expired
      if (now - loginTime > sessionTimeout) {
        sessionStorage.removeItem('adminAuthenticated');
        sessionStorage.removeItem('adminLoginTime');
        isAuthenticated = false;
      }

      if (!isAuthenticated) {
        authCheck.classList.remove('hidden');
        adminContent.classList.add('hidden');
        logoutBtn.style.display = 'none';
        loginStatus.style.display = 'none';
      } else {
        authCheck.classList.add('hidden');
        adminContent.classList.remove('hidden');
        logoutBtn.style.display = 'block';
        loginStatus.style.display = 'block';
      }
    }

    // Logout function
    function logout() {
      sessionStorage.removeItem('adminAuthenticated');
      sessionStorage.removeItem('adminLoginTime');
      window.location.href = '/admin/login';
    }

    // Event listeners
    logoutBtn.addEventListener('click', logout);

    // Check auth on page load
    checkAuth();

    // Check auth every 5 minutes
    setInterval(checkAuth, 5 * 60 * 1000);
  });

  // Functions for submission actions
  function markAsContacted(submissionId) {
    // TODO: Implement API call to update status
    console.log('Mark as contacted:', submissionId);
    alert('Feature coming soon!');
  }

  function deleteSubmission(submissionId) {
    if (confirm('Are you sure you want to delete this submission?')) {
      // TODO: Implement API call to delete submission
      console.log('Delete submission:', submissionId);
      alert('Feature coming soon!');
    }
  }
</script> 