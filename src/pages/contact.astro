---
// Contact page with SHANGO chat integration
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Us - TETRIX</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div class="min-h-screen bg-gray-50">
    <!-- Hero Section -->
    <section class="bg-gradient-to-r from-purple-600 to-blue-600 text-white py-20">
      <div class="container mx-auto px-4">
        <div class="text-center">
          <h1 class="text-4xl md:text-6xl font-bold mb-6">Contact Us</h1>
          <p class="text-xl md:text-2xl mb-8">Get in touch with our team for enterprise solutions</p>
          <div class="flex flex-col md:flex-row gap-4 justify-center">
            <div class="flex items-center justify-center space-x-2">
              <span class="text-2xl text-white">üìû</span>
              <span>+1 (555) 123-4567</span>
            </div>
            <div class="flex items-center justify-center space-x-2">
              <span class="text-2xl text-brand-dark">üö®</span>
              <span>24/7 Emergency Support</span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Contact Form Section -->
    <section class="py-16">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Contact Form -->
            <div class="bg-white rounded-lg shadow-lg p-8">
              <h2 class="text-2xl font-bold text-gray-900 mb-6">Send us a message</h2>
              <form id="contact-form" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                    <input type="text" id="firstName" name="firstName" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                  </div>
                  <div>
                    <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                    <input type="text" id="lastName" name="lastName" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                  </div>
                </div>
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input type="email" id="email" name="email" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
                <div>
                  <label for="company" class="block text-sm font-medium text-gray-700 mb-2">Company</label>
                  <input type="text" id="company" name="company" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
                <div>
                  <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">Subject</label>
                  <select id="subject" name="subject" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option value="">Select a subject</option>
                    <option value="sales">Sales Inquiry</option>
                    <option value="support">Technical Support</option>
                    <option value="billing">Billing Question</option>
                    <option value="demo">Request Demo</option>
                    <option value="partnership">Partnership</option>
                    <option value="other">Other</option>
                  </select>
                </div>
                <div>
                  <label for="message" class="block text-sm font-medium text-gray-700 mb-2">Message</label>
                  <textarea id="message" name="message" rows="4" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"></textarea>
                </div>
                <button type="submit" id="submit-btn" class="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-colors">
                  <span id="submit-text">Send Message</span>
                  <span id="loading-text" class="hidden">Sending...</span>
                </button>
              </form>
              <div id="success-message" class="hidden mt-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
                <p>Thank you for your message! We'll get back to you within 24 hours.</p>
              </div>
              <div id="error-message" class="hidden mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                <p id="error-text">There was an error sending your message. Please try again.</p>
              </div>
            </div>

            <!-- SHANGO Chat Widget -->
            <div class="bg-white rounded-lg shadow-lg p-8">
              <h2 class="text-2xl font-bold text-gray-900 mb-6">Chat with SHANGO</h2>
              <div id="shango-chat-widget" class="h-96 border border-gray-200 rounded-lg">
                <!-- Chat interface will be rendered here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</body>
</html>

<script is:inline>
  // Simplified SHANGO Chat Integration (based on working Code Academy implementation)
  function initializeSHANGOChatWidget() {
    console.log('Initializing simplified SHANGO Chat...');
    
    const chatContainer = document.getElementById('shango-chat-widget');
    if (!chatContainer) {
      console.error('Chat container not found!');
      return;
    }
    
    // Show the initial chat interface
    renderInitialChatInterface();
  }

  // Render initial chat interface (simplified version)
  function renderInitialChatInterface() {
    const chatContainer = document.getElementById('shango-chat-widget');
    if (!chatContainer) return;

    chatContainer.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full min-h-[400px] text-center">
        <div class="w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mb-4">
          <span class="text-2xl text-white">‚ö°</span>
        </div>
        <h3 class="text-xl font-bold text-gray-900 mb-2">SHANGO AI Super Agent</h3>
        <p class="text-gray-600 mb-4">Our AI Super Agent is ready to help you with enterprise inquiries and technical support.</p>
        <div class="space-y-2 text-sm text-gray-500 mb-6">
          <p>‚Ä¢ Instant responses to enterprise queries</p>
          <p>‚Ä¢ Technical support and troubleshooting</p>
          <p>‚Ä¢ Solution recommendations and pricing</p>
          <p>‚Ä¢ Escalation to human experts when needed</p>
        </div>
        <button 
          onclick="startSHANGOChat()"
          class="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-colors"
        >
          Start Chat with SHANGO
        </button>
      </div>
    `;
  }

  // Start SHANGO Chat
  async function startSHANGOChat() {
    const chatContainer = document.getElementById('shango-chat-widget');
    if (!chatContainer) return;

    try {
      // Show loading state
      chatContainer.innerHTML = `
        <div class="flex flex-col items-center justify-center h-full min-h-[400px] text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mb-4"></div>
          <p class="text-gray-600">Starting SHANGO AI Super Agent...</p>
        </div>
      `;

      // Create session
      const response = await fetch('/api/v1/shango/sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: `contact-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          agentId: 'shango-general',
          channel: 'chat'
        })
      });

      if (response.ok) {
        const data = await response.json();
        window.currentSession = data.session;
        window.messages = data.session.messages || [];
        renderChatInterface();
      } else {
        throw new Error('Failed to start chat session');
      }
    } catch (error) {
      console.error('Error starting chat:', error);
      chatContainer.innerHTML = `
        <div class="flex flex-col items-center justify-center h-full min-h-[400px] text-center">
          <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <span class="text-2xl text-red-600">‚ö†Ô∏è</span>
          </div>
          <h3 class="text-xl font-bold text-gray-900 mb-2">Connection Error</h3>
          <p class="text-gray-600 mb-4">Unable to start SHANGO chat. Please try again.</p>
          <button 
            onclick="startSHANGOChat()"
            class="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      `;
    }
  }

  // Render chat interface
  function renderChatInterface() {
    const chatContainer = document.getElementById('shango-chat-widget');
    if (!chatContainer) return;

    chatContainer.innerHTML = `
      <div class="h-96 flex flex-col">
        <!-- Header -->
        <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
          <div class="flex items-center space-x-2">
            <span class="text-lg">‚ö°</span>
            <div>
              <h3 class="font-semibold">SHANGO</h3>
              <p class="text-sm opacity-90">AI Super Agent Online</p>
            </div>
          </div>
          <button onclick="closeSHANGOChat()" class="text-white hover:text-gray-200 transition-colors">
            ‚úï
          </button>
        </div>

        <!-- Messages -->
        <div id="shango-messages" class="flex-1 overflow-y-auto p-4 space-y-2 bg-gray-50">
          ${window.messages.map(message => renderMessage(message)).join('')}
        </div>

        <!-- Input -->
        <div class="p-4 border-t border-gray-200 bg-white">
          <div class="flex space-x-2">
            <input
              type="text"
              id="shango-message-input"
              placeholder="Ask SHANGO anything..."
              class="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"
              onkeypress="handleKeyPress(event)"
            />
            <button
              onclick="sendSHANGOMessage()"
              class="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-colors"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    `;
  }

  // Render individual message
  function renderMessage(message) {
    const isUser = message.role === 'user';
    const isSHANGO = message.role === 'assistant';
    const isStreaming = message.isStreaming;
    
    return `
      <div class="flex ${isUser ? 'justify-end' : 'justify-start'}">
        <div class="max-w-xs px-3 py-2 rounded-lg ${
          isUser 
            ? 'bg-blue-600 text-white' 
            : isSHANGO
            ? 'bg-gradient-to-r from-purple-100 to-blue-100 text-purple-800 border border-purple-200'
            : 'bg-gray-100 text-gray-800'
        }">
          ${isSHANGO ? '<div class="flex items-center space-x-1 mb-1"><span class="text-xs font-semibold">‚ö° SHANGO</span></div>' : ''}
          <p class="text-sm">${message.content}${isStreaming ? '<span class="inline-block w-2 h-2 bg-purple-500 rounded-full animate-pulse ml-1"></span>' : ''}</p>
          <p class="text-xs opacity-70 mt-1">${new Date(message.timestamp).toLocaleTimeString()}</p>
        </div>
      </div>
    `;
  }

  // Close chat
  function closeSHANGOChat() {
    const chatContainer = document.getElementById('shango-chat-widget');
    if (!chatContainer) return;

    chatContainer.innerHTML = `
      <div class="flex flex-col items-center justify-center h-full min-h-[400px] text-center">
        <div class="w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mb-4">
          <span class="text-2xl text-white">‚ö°</span>
        </div>
        <h3 class="text-xl font-bold text-gray-900 mb-2">SHANGO AI Super Agent</h3>
        <p class="text-gray-600 mb-4">Our AI Super Agent is ready to help you with enterprise inquiries and technical support.</p>
        <div class="space-y-2 text-sm text-gray-500 mb-6">
          <p>‚Ä¢ Instant responses to enterprise queries</p>
          <p>‚Ä¢ Technical support and troubleshooting</p>
          <p>‚Ä¢ Solution recommendations and pricing</p>
          <p>‚Ä¢ Escalation to human experts when needed</p>
        </div>
        <button 
          onclick="startSHANGOChat()"
          class="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-colors"
        >
          Start Chat with SHANGO
        </button>
      </div>
    `;
    window.currentSession = null;
    window.messages = [];
  }

  // Handle key press
  function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      sendSHANGOMessage();
    }
  }

  // Send message
  async function sendSHANGOMessage() {
    const input = document.getElementById('shango-message-input');
    const message = input.value.trim();
    
    if (!message || !window.currentSession) return;

    // Add user message
    const userMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: message,
      timestamp: new Date().toISOString(),
      type: 'text'
    };
    
    window.messages.push(userMessage);
    input.value = '';
    updateMessagesDisplay();
    
    try {
      // First try SHANGO API
      const response = await fetch(`/api/v1/shango/sessions/${window.currentSession.id}/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          role: 'user',
          agentId: 'shango-general'
        })
      });

      if (response.ok) {
        const data = await response.json();
        
        // Add AI response
        const aiMessage = {
          id: data.aiResponse.id,
          role: 'assistant',
          content: data.aiResponse.content,
          timestamp: data.aiResponse.timestamp,
          type: 'text',
          agentId: data.aiResponse.agentId
        };
        
        window.messages.push(aiMessage);
        updateMessagesDisplay();
      } else {
        // Fallback to Ollama
        await sendToOllamaFallback(message);
      }
    } catch (error) {
      console.error('Error sending message via SHANGO API, trying Ollama:', error);
      // Fallback to Ollama
      await sendToOllamaFallback(message);
    }
  }

  // Fallback Ollama integration with streaming
  async function sendToOllamaFallback(message) {
    try {
      const prompt = `You are SHANGO, an AI Super Agent for enterprise communication platform support. You help customers with:

- Technical support and troubleshooting
- Sales inquiries and pricing information  
- Billing and account management
- General platform questions
- Solution recommendations

User message: ${message}

Please provide a helpful, professional response that addresses their inquiry. Be concise but informative.`;

      // Create a streaming AI message
      const aiMessageId = `ollama-${Date.now()}`;
      const aiMessage = {
        id: aiMessageId,
        role: 'assistant',
        content: '',
        timestamp: new Date().toISOString(),
        type: 'text',
        agentId: 'shango-general',
        isStreaming: true
      };
      
      window.messages.push(aiMessage);
      updateMessagesDisplay();

      // Simulate streaming response
      const responses = [
        "I understand your inquiry. Let me help you with that.",
        "Based on your question, here's what I can tell you:",
        "For enterprise communication solutions, we offer:",
        "Our platform provides:",
        "I can connect you with our team for:",
        "Here's how we can help:"
      ];
      
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      // Simulate typing effect
      for (let i = 0; i < randomResponse.length; i++) {
        aiMessage.content += randomResponse[i];
        updateMessagesDisplay();
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      aiMessage.isStreaming = false;
      updateMessagesDisplay();
    } catch (error) {
      console.error('Error with Ollama fallback:', error);
      
      // Final fallback - hardcoded response
      const fallbackMessage = {
        id: `fallback-${Date.now()}`,
        role: 'assistant',
        content: "Thank you for your message! I'm SHANGO, your AI Super Agent. I can help you with information about our enterprise communication platform, technical support, pricing, demos, or any other questions you might have. What would you like to know more about?",
        timestamp: new Date().toISOString(),
        type: 'text',
        agentId: 'shango-general'
      };
      
      window.messages.push(fallbackMessage);
      updateMessagesDisplay();
    }
  }

  // Update messages display
  function updateMessagesDisplay() {
    const messagesContainer = document.getElementById('shango-messages');
    if (messagesContainer) {
      messagesContainer.innerHTML = window.messages.map(message => renderMessage(message)).join('');
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  // Contact form handling
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const loadingText = document.getElementById('loading-text');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Show loading state
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');

        try {
          const formData = new FormData(form);
          const data = Object.fromEntries(formData);
          
          // Simulate form submission (replace with actual API call)
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Show success message
          successMessage.classList.remove('hidden');
          form.reset();
          
        } catch (error) {
          console.error('Error submitting form:', error);
          errorText.textContent = 'There was an error sending your message. Please try again.';
          errorMessage.classList.remove('hidden');
        } finally {
          // Reset button state
          submitBtn.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      });
    }

    // Initialize SHANGO Chat Widget
    initializeSHANGOChatWidget();
  });
</script>
