name: tetrix-production-fixed
services:
- name: tetrix-frontend
  github:
    repo: tetrixcorps/miniverxe
    branch: main
    deploy_on_push: true
  build_command: |
    # Clean up any conflicting lockfiles
    rm -f package-lock.json yarn.lock npm-shrinkwrap.json .yarnrc .yarnrc.yml
    # Install dependencies (pnpm already installed by buildpack)
    pnpm install --frozen-lockfile
    # Build the application
    pnpm run build
  run_command: pnpm run start
  source_dir: /
  instance_size_slug: professional-xs
  instance_count: 2
  http_port: 8080
  health_check:
    initial_delay_seconds: 60
    period_seconds: 15
    timeout_seconds: 10
    success_threshold: 1
    failure_threshold: 5
    http_path: /api/health
  envs:
  # Application Configuration
  - key: NODE_ENV
    value: production
    scope: RUN_AND_BUILD_TIME
  - key: HOST
    value: "0.0.0.0"
    scope: RUN_AND_BUILD_TIME
  - key: PORT
    value: "8080"
    scope: RUN_AND_BUILD_TIME
  - key: NODE_OPTIONS
    value: "--max-old-space-size=512"
    scope: RUN_AND_BUILD_TIME
  
  # Domain Configuration
  - key: TETRIX_DOMAIN
    value: tetrixcorp.com
    scope: RUN_AND_BUILD_TIME
  - key: JOROMI_DOMAIN
    value: joromi.tetrixcorp.com
    scope: RUN_AND_BUILD_TIME
  - key: CODE_ACADEMY_DOMAIN
    value: code-academy.tetrixcorp.com
    scope: RUN_AND_BUILD_TIME
  
  # Session Configuration
  - key: CROSS_PLATFORM_SESSION_SECRET
    value: tetrix-joromi-session-secret-2024
    scope: RUN_AND_BUILD_TIME
  
  # Sinch Configuration (Sensitive - should be SECRET in production)
  - key: SINCH_API_TOKEN
    value: ${SINCH_API_TOKEN}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_SERVICE_PLAN_ID
    value: ${SINCH_SERVICE_PLAN_ID}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_VIRTUAL_NUMBER
    value: ${SINCH_VIRTUAL_NUMBER}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_BACKUP_NUMBER_1
    value: ${SINCH_BACKUP_NUMBER_1}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_BACKUP_NUMBER_2
    value: ${SINCH_BACKUP_NUMBER_2}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_BACKUP_NUMBER_3
    value: ${SINCH_BACKUP_NUMBER_3}
    scope: RUN_AND_BUILD_TIME
  - key: SINCH_CONVERSATION_PROJECT_ID
    value: ${SINCH_CONVERSATION_PROJECT_ID}
    scope: RUN_AND_BUILD_TIME
  - key: NEXT_PUBLIC_SINCH_API_KEY
    value: ${NEXT_PUBLIC_SINCH_API_KEY}
    scope: RUN_AND_BUILD_TIME
  - key: NEXT_PUBLIC_SINCH_WIDGET_ID
    value: shango-widget-2024
    scope: RUN_AND_BUILD_TIME
  
  # Shango Configuration
  - key: SHANGO_SESSION_TIMEOUT
    value: "3600"
    scope: RUN_AND_BUILD_TIME
  - key: SHANGO_MAX_MESSAGES
    value: "1000"
    scope: RUN_AND_BUILD_TIME
  - key: SHANGO_DEFAULT_AGENT
    value: shango-general
    scope: RUN_AND_BUILD_TIME
  
  # Firebase Configuration (Sensitive - should be SECRET in production)
  - key: FIREBASE_API_KEY
    value: ${FIREBASE_API_KEY}
    scope: RUN_AND_BUILD_TIME
  - key: FIREBASE_AUTH_DOMAIN
    value: ${FIREBASE_AUTH_DOMAIN}
    scope: RUN_AND_BUILD_TIME
  - key: FIREBASE_PROJECT_ID
    value: ${FIREBASE_PROJECT_ID}
    scope: RUN_AND_BUILD_TIME
  - key: FIREBASE_STORAGE_BUCKET
    value: ${FIREBASE_STORAGE_BUCKET}
    scope: RUN_AND_BUILD_TIME
  - key: FIREBASE_MESSAGING_SENDER_ID
    value: ${FIREBASE_MESSAGING_SENDER_ID}
    scope: RUN_AND_BUILD_TIME
  - key: FIREBASE_APP_ID
    value: ${FIREBASE_APP_ID}
    scope: RUN_AND_BUILD_TIME
  
  # Database Configuration (Sensitive - should be SECRET in production)
  - key: DATABASE_URL
    value: ${DATABASE_URL}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_USER
    value: ${POSTGRES_USER}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_PASSWORD
    value: ${POSTGRES_PASSWORD}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_DB
    value: ${POSTGRES_DB}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_HOST
    value: ${POSTGRES_HOST}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_PORT
    value: ${POSTGRES_PORT}
    scope: RUN_AND_BUILD_TIME
  - key: POSTGRES_SSL
    value: require
    scope: RUN_AND_BUILD_TIME
  - key: INDUSTRY_AUTH_DB_URL
    value: ${INDUSTRY_AUTH_DB_URL}
    scope: RUN_AND_BUILD_TIME
  
  # Telnyx Configuration (Sensitive - should be SECRET in production)
  - key: TELNYX_API_KEY
    value: ${TELNYX_API_KEY}
    scope: RUN_AND_BUILD_TIME
  - key: TELNYX_VERIFY_PROFILE_ID
    value: ${TELNYX_VERIFY_PROFILE_ID}
    scope: RUN_AND_BUILD_TIME
  - key: TELNYX_WEBHOOK_SECRET
    value: ${TELNYX_WEBHOOK_SECRET}
    scope: RUN_AND_BUILD_TIME
  - key: TELNYX_PHONE_NUMBER
    value: ${TELNYX_PHONE_NUMBER}
    scope: RUN_AND_BUILD_TIME
  - key: TELNYX_API_URL
    value: https://api.telnyx.com
    scope: RUN_AND_BUILD_TIME
  
  # MQTT Configuration (Sensitive - should be SECRET in production)
  - key: MQTT_BROKER_URL
    value: ${MQTT_BROKER_URL}
    scope: RUN_AND_BUILD_TIME
  - key: MQTT_BROKER_PORT
    value: ${MQTT_BROKER_PORT}
    scope: RUN_AND_BUILD_TIME
  - key: MQTT_USERNAME
    value: ${MQTT_USERNAME}
    scope: RUN_AND_BUILD_TIME
  - key: MQTT_PASSWORD
    value: ${MQTT_PASSWORD}
    scope: RUN_AND_BUILD_TIME
  
  # Application Settings
  - key: DEMO_MODE
    value: "false"
    scope: RUN_AND_BUILD_TIME

domains:
- domain: tetrixcorp.com
  type: PRIMARY
- domain: joromi.tetrixcorp.com
  type: ALIAS
- domain: code-academy.tetrixcorp.com
  type: ALIAS

region: fra
alerts:
- rule: DEPLOYMENT_FAILED
- rule: DOMAIN_FAILED

ingress:
  rules:
  - match:
      path:
        prefix: /
    component:
      name: tetrix-frontend

features:
- buildpack-stack=ubuntu-22
