The code below is for a company website. The company engages in Software as a Service business model. You will perform two task. First, create a website using the code that can be built using the Astros framework (https://docs.astro.build/en/concepts/islands/) I want you to act as a UI/UX designer preparing documentation for a frontend develop to create user management stories for the developer to understand the outline of the website. 


Use https://impactilit.com/ as a reference. 


The name of this website is TETRIX. You will include a logo for this in the design that is centralized in the static pages.


Create detailed components with these requirements:
1. Use 'use client' directive for client-side components
2. Style with Tailwind CSS utility classes for responsive design
3. Use Lucide React for icons (from lucide-react package). Do NOT use other UI libraries unless requested
4. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
5. Configure image remotePatterns to enable stock photos from picsum.photos
6. Create root layout.tsx page that wraps necessary navigation items to all pages
7. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
8. Accurately implement necessary grid layouts
9. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping

Startup Services Landing Page with Gradient Design
</summary_title>

<image_analysis>

1. Navigation Elements:
- Top header with: Contact information (phone, email, address)
- Main navigation with: Home, About, Solutions, Services, Contact
- CTA button: "Get in Touch" in top right
- Logo placement in top left


2. Layout Components:
- Full-width header: 100vw x 60px
- Main content area: 100vw x ~70vh
- Logo container: 200px width
- Navigation menu: ~600px width
- Gradient background spanning full viewport


3. Content Sections:
- Hero section with large heading "Services for startups"
- Subheading descriptive text
- Technology partner logos (Framer, AWS, NVIDIA)
- "Using Amazing Technologies" text overlay
- Dual CTA buttons: "Get in Touch" and "View Works"


4. Interactive Controls:
- Primary CTA button: Dark background with light text
- Secondary CTA button: Light background with dark text
- Navigation menu items with hover states
- Interactive logo section with partner brands


5. Colors:
- Background gradient: #FFF8E7 to #E8F5E9
- Text: #1E1E1E
- CTA buttons: #2A2A2A
- Navigation background: rgba(42, 42, 42, 0.8)


6. Grid/Layout Structure:
- 12-column grid system
- Main content: 1200px max-width
- Responsive padding: 24px mobile, 48px desktop
- Flexible hero section with 2-column layout
</image_analysis>

<development_planning>

1. Project Structure:
```
src/
├── components/
│   ├── layout/
│   │   ├── Header
│   │   ├── Navigation
│   │   └── Footer
│   ├── features/
│   │   ├── Hero
│   │   ├── Partners
│   │   └── CTASection
│   └── shared/
├── assets/
├── styles/
├── hooks/
└── utils/
```


2. Key Features:
- Responsive navigation system
- Gradient background animation
- Partner logo carousel/grid
- Contact form integration
- Smooth scroll navigation


3. State Management:
```typescript
interface AppState {
├── navigation: {
│   ├── isMenuOpen: boolean
│   ├── activeSection: string
│   └── scrollPosition: number
├── }
├── contact: {
│   ├── formData: ContactForm
│   └── submitStatus: string
├── }
}
```


4. Routes:
```typescript
const routes = [
├── '/',
├── '/about',
├── '/solutions',
├── '/services',
└── '/contact'
]
```


5. Component Architecture:
- Header (container)
├── Navigation
├── ContactInfo
├── CTAButton
- Hero (container)
├── HeadingSection
├── SubheadingText
├── CTAGroup
- Partners (container)
├── PartnerGrid
└── TechnologyText


6. Responsive Breakpoints:
```scss
$breakpoints: (
├── 'mobile': 320px,
├── 'tablet': 768px,
├── 'desktop': 1024px,
└── 'wide': 1440px
);
```
</development_planning>



Routes:
- /contact-information-phone
- /email
- /address
- /home
- /about
- /solutions
- /services
- /contact

Page Implementations:
/contact-information-phone:
Core Purpose: Display company phone contact details and call options
Key Components
- Phone number display with click-to-call functionality
- Business hours indicator
- Department contact list
- Call-back request form
Layout Structure
- Single column layout
- Sticky header with phone number
- Scrollable department list
- Mobile-first design with tap-to-call buttons

/email:
Core Purpose: Provide email contact options and form submission
Key Components
- Email contact form
- Department email directory
- Email templates for common inquiries
- Response time expectations
Layout Structure
- Two-column desktop layout
- Single column mobile layout
- Floating validation messages
- Progressive form sections

/address:
Core Purpose: Show physical location and directions
Key Components
- Interactive map
- Written directions
- Public transport options
- Parking information
Layout Structure
- Map takes 50% of viewport
- Address details sidebar
- Expandable transport options
- Responsive map sizing

/home:
Core Purpose: Main landing page showcasing key offerings
Key Components
- Hero section with CTA
- Featured services carousel
- News

/updates section
- Testimonials
Layout Structure:
- Full-width hero
- Grid-based content sections
- Sticky navigation
- Mobile-optimized content blocks

/about:
Core Purpose: Company information and history
Key Components
- Company timeline
- Team profiles
- Mission statement
- Values section
Layout Structure
- Narrative scroll layout
- Side navigation for sections
- Image galleries
- Responsive text columns

/solutions:
Core Purpose: Showcase product

/service solutions
Key Components:
- Solution categories
- Case studies
- Implementation process
- Pricing tables
Layout Structure
- Card-based grid layout
- Filtering system
- Comparison tables
- Mobile-friendly cards

/services:
Core Purpose: Detailed service offerings
Key Components
- Service catalog
- Booking

/inquiry forms
- Service comparison tool
- FAQ section
Layout Structure:
- Service cards grid
- Sticky category navigation
- Expandable service details
- Mobile-optimized booking forms

/contact:
Core Purpose: Central contact hub
Key Components
- Universal contact form
- Contact method options
- Live chat widget
- Support ticket system
Layout Structure
- Multi-section layout
- Progressive contact form
- Floating chat widget
- Mobile-first contact options

Layouts:
MainLayout:
- Applicable routes: All routes
- Core components
  - Header with navigation
  - Footer with site map
  - Breadcrumb navigation
  - Mobile menu
- Responsive behavior
  - Collapsible navigation on mobile
  - Fluid container widths
  - Dynamic spacing
  - Flexible content areas

ContactLayout
- Applicable routes: /contact-information-phone, /email, /address, /contact
- Core components
  - Contact method selector
  - Social media links
  - Contact form wrapper
  - Support status indicator
- Responsive behavior
  - Stack elements on mobile
  - Maintain form usability
  - Adjust input sizes
  - Preserve tap targets

ContentLayout
- Applicable routes: /home, /about, /solutions, /services
- Core components
  - Page header
  - Content area
  - Side navigation
  - Related content
- Responsive behavior
  - Collapse side navigation
  - Adjust typography
  - Reflow content blocks
  - Optimize images