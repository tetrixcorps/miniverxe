<testsuites id="" name="" tests="110" failures="45" skipped="0" errors="0" time="14.926953">
<testsuite name="unit/voice-api-unit.spec.ts" timestamp="2025-10-10T23:17:17.968Z" hostname="chromium" tests="22" failures="9" skipped="0" time="2.715" errors="0">
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should validate phone number format" classname="unit/voice-api-unit.spec.ts" time="0.116">
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should require required fields" classname="unit/voice-api-unit.spec.ts" time="0.134">
<failure message="voice-api-unit.spec.ts:57:9 should require required fields" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:57:9 › Voice API Unit Tests › Telnyx Voice Service › should require required fields 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Missing required fields"
    Received string:    "Missing required field: from"

      65 |       expect(response.status()).toBe(400);
      66 |       const data = await response.json();
    > 67 |       expect(data.error).toContain('Missing required fields');
         |                          ^
      68 |     });
      69 |
      70 |     test('should accept valid phone numbers', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:67:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers" classname="unit/voice-api-unit.spec.ts" time="0.109">
<failure message="voice-api-unit.spec.ts:70:9 should accept valid phone numbers" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:70:9 › Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      74 |
      75 |       // This might fail due to missing API keys, but should validate format
    > 76 |       expect([200, 500]).toContain(response.status());
         |                          ^
      77 |     });
      78 |   });
      79 |
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:76:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response" classname="unit/voice-api-unit.spec.ts" time="0.139">
<failure message="voice-api-unit.spec.ts:81:9 should generate valid TeXML response" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:81:9 › Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      86 |       });
      87 |
    > 88 |       expect(response.status()).toBe(200);
         |                                 ^
      89 |       const contentType = response.headers()['content-type'];
      90 |       expect(contentType).toContain('text/xml');
      91 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:88:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements" classname="unit/voice-api-unit.spec.ts" time="0.128">
<failure message="voice-api-unit.spec.ts:93:9 should include required TeXML elements" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:93:9 › Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       98 |       });
       99 |
    > 100 |       expect(response.status()).toBe(200);
          |                                 ^
      101 |       const xmlContent = await response.text();
      102 |       
      103 |       expect(xmlContent).toContain('<?xml version="1.0" encoding="UTF-8"?>');
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:100:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should handle custom messages" classname="unit/voice-api-unit.spec.ts" time="0.128">
<failure message="voice-api-unit.spec.ts:110:9 should handle custom messages" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:110:9 › Voice API Unit Tests › TeXML Response Generation › should handle custom messages 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      116 |       });
      117 |
    > 118 |       expect(response.status()).toBe(200);
          |                                 ^
      119 |       const xmlContent = await response.text();
      120 |       expect(xmlContent).toContain(customMessage);
      121 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:118:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should require audio URL for transcription" classname="unit/voice-api-unit.spec.ts" time="0.146">
<failure message="voice-api-unit.spec.ts:125:9 should require audio URL for transcription" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:125:9 › Voice API Unit Tests › Transcription Processing › should require audio URL for transcription 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Audio URL is required"
    Received string:    "Missing required field: audioUrl"

      133 |       expect(response.status()).toBe(400);
      134 |       const data = await response.json();
    > 135 |       expect(data.error).toContain('Audio URL is required');
          |                          ^
      136 |     });
      137 |
      138 |     test('should validate audio URL format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:135:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should validate audio URL format" classname="unit/voice-api-unit.spec.ts" time="0.157">
<failure message="voice-api-unit.spec.ts:138:9 should validate audio URL format" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:138:9 › Voice API Unit Tests › Transcription Processing › should validate audio URL format 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid audio URL format"
    Received string:    "Invalid URL format"

      146 |       expect(response.status()).toBe(400);
      147 |       const data = await response.json();
    > 148 |       expect(data.error).toContain('Invalid audio URL format');
          |                          ^
      149 |     });
      150 |
      151 |     test('should accept valid audio URL', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:148:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should accept valid audio URL" classname="unit/voice-api-unit.spec.ts" time="0.11">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should require transcription text" classname="unit/voice-api-unit.spec.ts" time="0.117">
<failure message="voice-api-unit.spec.ts:165:9 should require transcription text" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:165:9 › Voice API Unit Tests › AI Response Generation › should require transcription text 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Transcription text is required"
    Received string:    "Missing required field: transcription"

      173 |       expect(response.status()).toBe(400);
      174 |       const data = await response.json();
    > 175 |       expect(data.error).toContain('Transcription text is required');
          |                          ^
      176 |     });
      177 |
      178 |     test('should generate AI response for valid transcription', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:175:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should generate AI response for valid transcription" classname="unit/voice-api-unit.spec.ts" time="0.157">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should handle different transcription inputs" classname="unit/voice-api-unit.spec.ts" time="0.108">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should return active sessions" classname="unit/voice-api-unit.spec.ts" time="0.203">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should handle session cleanup" classname="unit/voice-api-unit.spec.ts" time="0.145">
<failure message="voice-api-unit.spec.ts:228:9 should handle session cleanup" type="FAILURE">
<![CDATA[  [chromium] › unit/voice-api-unit.spec.ts:228:9 › Voice API Unit Tests › Session Management › should handle session cleanup 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "cleaned up"
    Received string:    "Cleaned up 0 sessions"

      232 |       const data = await response.json();
      233 |       expect(data.success).toBe(true);
    > 234 |       expect(data.message).toContain('cleaned up');
          |                            ^
      235 |     });
      236 |
      237 |     test('should validate session ID format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:234:28
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should validate session ID format" classname="unit/voice-api-unit.spec.ts" time="0.158">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return health status" classname="unit/voice-api-unit.spec.ts" time="0.032">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return transcription health status" classname="unit/voice-api-unit.spec.ts" time="0.129">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle invalid endpoints gracefully" classname="unit/voice-api-unit.spec.ts" time="0.134">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle malformed JSON requests" classname="unit/voice-api-unit.spec.ts" time="0.112">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle missing request body" classname="unit/voice-api-unit.spec.ts" time="0.156">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should validate environment configuration" classname="unit/voice-api-unit.spec.ts" time="0.041">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should return integration status" classname="unit/voice-api-unit.spec.ts" time="0.056">
</testcase>
</testsuite>
<testsuite name="unit/voice-api-unit.spec.ts" timestamp="2025-10-10T23:17:17.968Z" hostname="firefox" tests="22" failures="9" skipped="0" time="2.618" errors="0">
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should validate phone number format" classname="unit/voice-api-unit.spec.ts" time="0.157">
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should require required fields" classname="unit/voice-api-unit.spec.ts" time="0.112">
<failure message="voice-api-unit.spec.ts:57:9 should require required fields" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:57:9 › Voice API Unit Tests › Telnyx Voice Service › should require required fields 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Missing required fields"
    Received string:    "Missing required field: from"

      65 |       expect(response.status()).toBe(400);
      66 |       const data = await response.json();
    > 67 |       expect(data.error).toContain('Missing required fields');
         |                          ^
      68 |     });
      69 |
      70 |     test('should accept valid phone numbers', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:67:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers" classname="unit/voice-api-unit.spec.ts" time="0.122">
<failure message="voice-api-unit.spec.ts:70:9 should accept valid phone numbers" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:70:9 › Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      74 |
      75 |       // This might fail due to missing API keys, but should validate format
    > 76 |       expect([200, 500]).toContain(response.status());
         |                          ^
      77 |     });
      78 |   });
      79 |
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:76:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response" classname="unit/voice-api-unit.spec.ts" time="0.104">
<failure message="voice-api-unit.spec.ts:81:9 should generate valid TeXML response" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:81:9 › Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      86 |       });
      87 |
    > 88 |       expect(response.status()).toBe(200);
         |                                 ^
      89 |       const contentType = response.headers()['content-type'];
      90 |       expect(contentType).toContain('text/xml');
      91 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:88:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements" classname="unit/voice-api-unit.spec.ts" time="0.132">
<failure message="voice-api-unit.spec.ts:93:9 should include required TeXML elements" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:93:9 › Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       98 |       });
       99 |
    > 100 |       expect(response.status()).toBe(200);
          |                                 ^
      101 |       const xmlContent = await response.text();
      102 |       
      103 |       expect(xmlContent).toContain('<?xml version="1.0" encoding="UTF-8"?>');
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:100:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should handle custom messages" classname="unit/voice-api-unit.spec.ts" time="0.116">
<failure message="voice-api-unit.spec.ts:110:9 should handle custom messages" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:110:9 › Voice API Unit Tests › TeXML Response Generation › should handle custom messages 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      116 |       });
      117 |
    > 118 |       expect(response.status()).toBe(200);
          |                                 ^
      119 |       const xmlContent = await response.text();
      120 |       expect(xmlContent).toContain(customMessage);
      121 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:118:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should require audio URL for transcription" classname="unit/voice-api-unit.spec.ts" time="0.147">
<failure message="voice-api-unit.spec.ts:125:9 should require audio URL for transcription" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:125:9 › Voice API Unit Tests › Transcription Processing › should require audio URL for transcription 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Audio URL is required"
    Received string:    "Missing required field: audioUrl"

      133 |       expect(response.status()).toBe(400);
      134 |       const data = await response.json();
    > 135 |       expect(data.error).toContain('Audio URL is required');
          |                          ^
      136 |     });
      137 |
      138 |     test('should validate audio URL format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:135:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should validate audio URL format" classname="unit/voice-api-unit.spec.ts" time="0.04">
<failure message="voice-api-unit.spec.ts:138:9 should validate audio URL format" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:138:9 › Voice API Unit Tests › Transcription Processing › should validate audio URL format 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid audio URL format"
    Received string:    "Invalid URL format"

      146 |       expect(response.status()).toBe(400);
      147 |       const data = await response.json();
    > 148 |       expect(data.error).toContain('Invalid audio URL format');
          |                          ^
      149 |     });
      150 |
      151 |     test('should accept valid audio URL', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:148:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should accept valid audio URL" classname="unit/voice-api-unit.spec.ts" time="0.104">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should require transcription text" classname="unit/voice-api-unit.spec.ts" time="0.125">
<failure message="voice-api-unit.spec.ts:165:9 should require transcription text" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:165:9 › Voice API Unit Tests › AI Response Generation › should require transcription text 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Transcription text is required"
    Received string:    "Missing required field: transcription"

      173 |       expect(response.status()).toBe(400);
      174 |       const data = await response.json();
    > 175 |       expect(data.error).toContain('Transcription text is required');
          |                          ^
      176 |     });
      177 |
      178 |     test('should generate AI response for valid transcription', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:175:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should generate AI response for valid transcription" classname="unit/voice-api-unit.spec.ts" time="0.123">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should handle different transcription inputs" classname="unit/voice-api-unit.spec.ts" time="0.186">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should return active sessions" classname="unit/voice-api-unit.spec.ts" time="0.154">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should handle session cleanup" classname="unit/voice-api-unit.spec.ts" time="0.151">
<failure message="voice-api-unit.spec.ts:228:9 should handle session cleanup" type="FAILURE">
<![CDATA[  [firefox] › unit/voice-api-unit.spec.ts:228:9 › Voice API Unit Tests › Session Management › should handle session cleanup 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "cleaned up"
    Received string:    "Cleaned up 0 sessions"

      232 |       const data = await response.json();
      233 |       expect(data.success).toBe(true);
    > 234 |       expect(data.message).toContain('cleaned up');
          |                            ^
      235 |     });
      236 |
      237 |     test('should validate session ID format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:234:28
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should validate session ID format" classname="unit/voice-api-unit.spec.ts" time="0.11">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return health status" classname="unit/voice-api-unit.spec.ts" time="0.11">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return transcription health status" classname="unit/voice-api-unit.spec.ts" time="0.106">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle invalid endpoints gracefully" classname="unit/voice-api-unit.spec.ts" time="0.12">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle malformed JSON requests" classname="unit/voice-api-unit.spec.ts" time="0.107">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle missing request body" classname="unit/voice-api-unit.spec.ts" time="0.125">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should validate environment configuration" classname="unit/voice-api-unit.spec.ts" time="0.051">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should return integration status" classname="unit/voice-api-unit.spec.ts" time="0.116">
</testcase>
</testsuite>
<testsuite name="unit/voice-api-unit.spec.ts" timestamp="2025-10-10T23:17:17.968Z" hostname="webkit" tests="22" failures="9" skipped="0" time="2.314" errors="0">
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should validate phone number format" classname="unit/voice-api-unit.spec.ts" time="0.102">
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should require required fields" classname="unit/voice-api-unit.spec.ts" time="0.111">
<failure message="voice-api-unit.spec.ts:57:9 should require required fields" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:57:9 › Voice API Unit Tests › Telnyx Voice Service › should require required fields 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Missing required fields"
    Received string:    "Missing required field: from"

      65 |       expect(response.status()).toBe(400);
      66 |       const data = await response.json();
    > 67 |       expect(data.error).toContain('Missing required fields');
         |                          ^
      68 |     });
      69 |
      70 |     test('should accept valid phone numbers', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:67:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers" classname="unit/voice-api-unit.spec.ts" time="0.107">
<failure message="voice-api-unit.spec.ts:70:9 should accept valid phone numbers" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:70:9 › Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      74 |
      75 |       // This might fail due to missing API keys, but should validate format
    > 76 |       expect([200, 500]).toContain(response.status());
         |                          ^
      77 |     });
      78 |   });
      79 |
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:76:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response" classname="unit/voice-api-unit.spec.ts" time="0.096">
<failure message="voice-api-unit.spec.ts:81:9 should generate valid TeXML response" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:81:9 › Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      86 |       });
      87 |
    > 88 |       expect(response.status()).toBe(200);
         |                                 ^
      89 |       const contentType = response.headers()['content-type'];
      90 |       expect(contentType).toContain('text/xml');
      91 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:88:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements" classname="unit/voice-api-unit.spec.ts" time="0.107">
<failure message="voice-api-unit.spec.ts:93:9 should include required TeXML elements" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:93:9 › Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       98 |       });
       99 |
    > 100 |       expect(response.status()).toBe(200);
          |                                 ^
      101 |       const xmlContent = await response.text();
      102 |       
      103 |       expect(xmlContent).toContain('<?xml version="1.0" encoding="UTF-8"?>');
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:100:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should handle custom messages" classname="unit/voice-api-unit.spec.ts" time="0.098">
<failure message="voice-api-unit.spec.ts:110:9 should handle custom messages" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:110:9 › Voice API Unit Tests › TeXML Response Generation › should handle custom messages 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      116 |       });
      117 |
    > 118 |       expect(response.status()).toBe(200);
          |                                 ^
      119 |       const xmlContent = await response.text();
      120 |       expect(xmlContent).toContain(customMessage);
      121 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:118:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should require audio URL for transcription" classname="unit/voice-api-unit.spec.ts" time="0.214">
<failure message="voice-api-unit.spec.ts:125:9 should require audio URL for transcription" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:125:9 › Voice API Unit Tests › Transcription Processing › should require audio URL for transcription 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Audio URL is required"
    Received string:    "Missing required field: audioUrl"

      133 |       expect(response.status()).toBe(400);
      134 |       const data = await response.json();
    > 135 |       expect(data.error).toContain('Audio URL is required');
          |                          ^
      136 |     });
      137 |
      138 |     test('should validate audio URL format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:135:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should validate audio URL format" classname="unit/voice-api-unit.spec.ts" time="0.094">
<failure message="voice-api-unit.spec.ts:138:9 should validate audio URL format" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:138:9 › Voice API Unit Tests › Transcription Processing › should validate audio URL format 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid audio URL format"
    Received string:    "Invalid URL format"

      146 |       expect(response.status()).toBe(400);
      147 |       const data = await response.json();
    > 148 |       expect(data.error).toContain('Invalid audio URL format');
          |                          ^
      149 |     });
      150 |
      151 |     test('should accept valid audio URL', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:148:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should accept valid audio URL" classname="unit/voice-api-unit.spec.ts" time="0.15">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should require transcription text" classname="unit/voice-api-unit.spec.ts" time="0.028">
<failure message="voice-api-unit.spec.ts:165:9 should require transcription text" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:165:9 › Voice API Unit Tests › AI Response Generation › should require transcription text 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Transcription text is required"
    Received string:    "Missing required field: transcription"

      173 |       expect(response.status()).toBe(400);
      174 |       const data = await response.json();
    > 175 |       expect(data.error).toContain('Transcription text is required');
          |                          ^
      176 |     });
      177 |
      178 |     test('should generate AI response for valid transcription', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:175:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should generate AI response for valid transcription" classname="unit/voice-api-unit.spec.ts" time="0.105">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should handle different transcription inputs" classname="unit/voice-api-unit.spec.ts" time="0.167">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should return active sessions" classname="unit/voice-api-unit.spec.ts" time="0.124">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should handle session cleanup" classname="unit/voice-api-unit.spec.ts" time="0.097">
<failure message="voice-api-unit.spec.ts:228:9 should handle session cleanup" type="FAILURE">
<![CDATA[  [webkit] › unit/voice-api-unit.spec.ts:228:9 › Voice API Unit Tests › Session Management › should handle session cleanup 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "cleaned up"
    Received string:    "Cleaned up 0 sessions"

      232 |       const data = await response.json();
      233 |       expect(data.success).toBe(true);
    > 234 |       expect(data.message).toContain('cleaned up');
          |                            ^
      235 |     });
      236 |
      237 |     test('should validate session ID format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:234:28
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should validate session ID format" classname="unit/voice-api-unit.spec.ts" time="0.095">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return health status" classname="unit/voice-api-unit.spec.ts" time="0.101">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return transcription health status" classname="unit/voice-api-unit.spec.ts" time="0.104">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle invalid endpoints gracefully" classname="unit/voice-api-unit.spec.ts" time="0.105">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle malformed JSON requests" classname="unit/voice-api-unit.spec.ts" time="0.092">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle missing request body" classname="unit/voice-api-unit.spec.ts" time="0.035">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should validate environment configuration" classname="unit/voice-api-unit.spec.ts" time="0.147">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should return integration status" classname="unit/voice-api-unit.spec.ts" time="0.035">
</testcase>
</testsuite>
<testsuite name="unit/voice-api-unit.spec.ts" timestamp="2025-10-10T23:17:17.968Z" hostname="Mobile Chrome" tests="22" failures="9" skipped="0" time="2.082" errors="0">
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should validate phone number format" classname="unit/voice-api-unit.spec.ts" time="0.115">
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should require required fields" classname="unit/voice-api-unit.spec.ts" time="0.138">
<failure message="voice-api-unit.spec.ts:57:9 should require required fields" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:57:9 › Voice API Unit Tests › Telnyx Voice Service › should require required fields 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Missing required fields"
    Received string:    "Missing required field: from"

      65 |       expect(response.status()).toBe(400);
      66 |       const data = await response.json();
    > 67 |       expect(data.error).toContain('Missing required fields');
         |                          ^
      68 |     });
      69 |
      70 |     test('should accept valid phone numbers', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:67:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers" classname="unit/voice-api-unit.spec.ts" time="0.105">
<failure message="voice-api-unit.spec.ts:70:9 should accept valid phone numbers" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:70:9 › Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      74 |
      75 |       // This might fail due to missing API keys, but should validate format
    > 76 |       expect([200, 500]).toContain(response.status());
         |                          ^
      77 |     });
      78 |   });
      79 |
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:76:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response" classname="unit/voice-api-unit.spec.ts" time="0.122">
<failure message="voice-api-unit.spec.ts:81:9 should generate valid TeXML response" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:81:9 › Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      86 |       });
      87 |
    > 88 |       expect(response.status()).toBe(200);
         |                                 ^
      89 |       const contentType = response.headers()['content-type'];
      90 |       expect(contentType).toContain('text/xml');
      91 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:88:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements" classname="unit/voice-api-unit.spec.ts" time="0.13">
<failure message="voice-api-unit.spec.ts:93:9 should include required TeXML elements" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:93:9 › Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       98 |       });
       99 |
    > 100 |       expect(response.status()).toBe(200);
          |                                 ^
      101 |       const xmlContent = await response.text();
      102 |       
      103 |       expect(xmlContent).toContain('<?xml version="1.0" encoding="UTF-8"?>');
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:100:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should handle custom messages" classname="unit/voice-api-unit.spec.ts" time="0.113">
<failure message="voice-api-unit.spec.ts:110:9 should handle custom messages" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:110:9 › Voice API Unit Tests › TeXML Response Generation › should handle custom messages 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      116 |       });
      117 |
    > 118 |       expect(response.status()).toBe(200);
          |                                 ^
      119 |       const xmlContent = await response.text();
      120 |       expect(xmlContent).toContain(customMessage);
      121 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:118:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should require audio URL for transcription" classname="unit/voice-api-unit.spec.ts" time="0.112">
<failure message="voice-api-unit.spec.ts:125:9 should require audio URL for transcription" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:125:9 › Voice API Unit Tests › Transcription Processing › should require audio URL for transcription 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Audio URL is required"
    Received string:    "Missing required field: audioUrl"

      133 |       expect(response.status()).toBe(400);
      134 |       const data = await response.json();
    > 135 |       expect(data.error).toContain('Audio URL is required');
          |                          ^
      136 |     });
      137 |
      138 |     test('should validate audio URL format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:135:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should validate audio URL format" classname="unit/voice-api-unit.spec.ts" time="0.096">
<failure message="voice-api-unit.spec.ts:138:9 should validate audio URL format" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:138:9 › Voice API Unit Tests › Transcription Processing › should validate audio URL format 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid audio URL format"
    Received string:    "Invalid URL format"

      146 |       expect(response.status()).toBe(400);
      147 |       const data = await response.json();
    > 148 |       expect(data.error).toContain('Invalid audio URL format');
          |                          ^
      149 |     });
      150 |
      151 |     test('should accept valid audio URL', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:148:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should accept valid audio URL" classname="unit/voice-api-unit.spec.ts" time="0.092">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should require transcription text" classname="unit/voice-api-unit.spec.ts" time="0.091">
<failure message="voice-api-unit.spec.ts:165:9 should require transcription text" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:165:9 › Voice API Unit Tests › AI Response Generation › should require transcription text 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Transcription text is required"
    Received string:    "Missing required field: transcription"

      173 |       expect(response.status()).toBe(400);
      174 |       const data = await response.json();
    > 175 |       expect(data.error).toContain('Transcription text is required');
          |                          ^
      176 |     });
      177 |
      178 |     test('should generate AI response for valid transcription', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:175:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should generate AI response for valid transcription" classname="unit/voice-api-unit.spec.ts" time="0.037">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should handle different transcription inputs" classname="unit/voice-api-unit.spec.ts" time="0.153">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should return active sessions" classname="unit/voice-api-unit.spec.ts" time="0.104">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should handle session cleanup" classname="unit/voice-api-unit.spec.ts" time="0.107">
<failure message="voice-api-unit.spec.ts:228:9 should handle session cleanup" type="FAILURE">
<![CDATA[  [Mobile Chrome] › unit/voice-api-unit.spec.ts:228:9 › Voice API Unit Tests › Session Management › should handle session cleanup 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "cleaned up"
    Received string:    "Cleaned up 0 sessions"

      232 |       const data = await response.json();
      233 |       expect(data.success).toBe(true);
    > 234 |       expect(data.message).toContain('cleaned up');
          |                            ^
      235 |     });
      236 |
      237 |     test('should validate session ID format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:234:28
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should validate session ID format" classname="unit/voice-api-unit.spec.ts" time="0.091">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return health status" classname="unit/voice-api-unit.spec.ts" time="0.03">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return transcription health status" classname="unit/voice-api-unit.spec.ts" time="0.109">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle invalid endpoints gracefully" classname="unit/voice-api-unit.spec.ts" time="0.099">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle malformed JSON requests" classname="unit/voice-api-unit.spec.ts" time="0.085">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle missing request body" classname="unit/voice-api-unit.spec.ts" time="0.096">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should validate environment configuration" classname="unit/voice-api-unit.spec.ts" time="0.029">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should return integration status" classname="unit/voice-api-unit.spec.ts" time="0.028">
</testcase>
</testsuite>
<testsuite name="unit/voice-api-unit.spec.ts" timestamp="2025-10-10T23:17:17.968Z" hostname="Mobile Safari" tests="22" failures="9" skipped="0" time="1.814" errors="0">
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should validate phone number format" classname="unit/voice-api-unit.spec.ts" time="0.08">
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should require required fields" classname="unit/voice-api-unit.spec.ts" time="0.089">
<failure message="voice-api-unit.spec.ts:57:9 should require required fields" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:57:9 › Voice API Unit Tests › Telnyx Voice Service › should require required fields 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Missing required fields"
    Received string:    "Missing required field: from"

      65 |       expect(response.status()).toBe(400);
      66 |       const data = await response.json();
    > 67 |       expect(data.error).toContain('Missing required fields');
         |                          ^
      68 |     });
      69 |
      70 |     test('should accept valid phone numbers', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:67:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers" classname="unit/voice-api-unit.spec.ts" time="0.084">
<failure message="voice-api-unit.spec.ts:70:9 should accept valid phone numbers" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:70:9 › Voice API Unit Tests › Telnyx Voice Service › should accept valid phone numbers 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      74 |
      75 |       // This might fail due to missing API keys, but should validate format
    > 76 |       expect([200, 500]).toContain(response.status());
         |                          ^
      77 |     });
      78 |   });
      79 |
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:76:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response" classname="unit/voice-api-unit.spec.ts" time="0.111">
<failure message="voice-api-unit.spec.ts:81:9 should generate valid TeXML response" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:81:9 › Voice API Unit Tests › TeXML Response Generation › should generate valid TeXML response 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      86 |       });
      87 |
    > 88 |       expect(response.status()).toBe(200);
         |                                 ^
      89 |       const contentType = response.headers()['content-type'];
      90 |       expect(contentType).toContain('text/xml');
      91 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:88:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements" classname="unit/voice-api-unit.spec.ts" time="0.111">
<failure message="voice-api-unit.spec.ts:93:9 should include required TeXML elements" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:93:9 › Voice API Unit Tests › TeXML Response Generation › should include required TeXML elements 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       98 |       });
       99 |
    > 100 |       expect(response.status()).toBe(200);
          |                                 ^
      101 |       const xmlContent = await response.text();
      102 |       
      103 |       expect(xmlContent).toContain('<?xml version="1.0" encoding="UTF-8"?>');
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:100:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › TeXML Response Generation › should handle custom messages" classname="unit/voice-api-unit.spec.ts" time="0.103">
<failure message="voice-api-unit.spec.ts:110:9 should handle custom messages" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:110:9 › Voice API Unit Tests › TeXML Response Generation › should handle custom messages 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      116 |       });
      117 |
    > 118 |       expect(response.status()).toBe(200);
          |                                 ^
      119 |       const xmlContent = await response.text();
      120 |       expect(xmlContent).toContain(customMessage);
      121 |     });
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:118:33
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should require audio URL for transcription" classname="unit/voice-api-unit.spec.ts" time="0.1">
<failure message="voice-api-unit.spec.ts:125:9 should require audio URL for transcription" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:125:9 › Voice API Unit Tests › Transcription Processing › should require audio URL for transcription 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Audio URL is required"
    Received string:    "Missing required field: audioUrl"

      133 |       expect(response.status()).toBe(400);
      134 |       const data = await response.json();
    > 135 |       expect(data.error).toContain('Audio URL is required');
          |                          ^
      136 |     });
      137 |
      138 |     test('should validate audio URL format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:135:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should validate audio URL format" classname="unit/voice-api-unit.spec.ts" time="0.112">
<failure message="voice-api-unit.spec.ts:138:9 should validate audio URL format" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:138:9 › Voice API Unit Tests › Transcription Processing › should validate audio URL format 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid audio URL format"
    Received string:    "Invalid URL format"

      146 |       expect(response.status()).toBe(400);
      147 |       const data = await response.json();
    > 148 |       expect(data.error).toContain('Invalid audio URL format');
          |                          ^
      149 |     });
      150 |
      151 |     test('should accept valid audio URL', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:148:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Transcription Processing › should accept valid audio URL" classname="unit/voice-api-unit.spec.ts" time="0.108">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should require transcription text" classname="unit/voice-api-unit.spec.ts" time="0.103">
<failure message="voice-api-unit.spec.ts:165:9 should require transcription text" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:165:9 › Voice API Unit Tests › AI Response Generation › should require transcription text 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "Transcription text is required"
    Received string:    "Missing required field: transcription"

      173 |       expect(response.status()).toBe(400);
      174 |       const data = await response.json();
    > 175 |       expect(data.error).toContain('Transcription text is required');
          |                          ^
      176 |     });
      177 |
      178 |     test('should generate AI response for valid transcription', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:175:26
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should generate AI response for valid transcription" classname="unit/voice-api-unit.spec.ts" time="0.111">
</testcase>
<testcase name="Voice API Unit Tests › AI Response Generation › should handle different transcription inputs" classname="unit/voice-api-unit.spec.ts" time="0.085">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should return active sessions" classname="unit/voice-api-unit.spec.ts" time="0.091">
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should handle session cleanup" classname="unit/voice-api-unit.spec.ts" time="0.048">
<failure message="voice-api-unit.spec.ts:228:9 should handle session cleanup" type="FAILURE">
<![CDATA[  [Mobile Safari] › unit/voice-api-unit.spec.ts:228:9 › Voice API Unit Tests › Session Management › should handle session cleanup 

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "cleaned up"
    Received string:    "Cleaned up 0 sessions"

      232 |       const data = await response.json();
      233 |       expect(data.success).toBe(true);
    > 234 |       expect(data.message).toContain('cleaned up');
          |                            ^
      235 |     });
      236 |
      237 |     test('should validate session ID format', async ({ request }) => {
        at /home/diegomartinez/Desktop/tetrix/tests/unit/voice-api-unit.spec.ts:234:28
]]>
</failure>
</testcase>
<testcase name="Voice API Unit Tests › Session Management › should validate session ID format" classname="unit/voice-api-unit.spec.ts" time="0.062">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return health status" classname="unit/voice-api-unit.spec.ts" time="0.055">
</testcase>
<testcase name="Voice API Unit Tests › Health Checks › should return transcription health status" classname="unit/voice-api-unit.spec.ts" time="0.066">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle invalid endpoints gracefully" classname="unit/voice-api-unit.spec.ts" time="0.056">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle malformed JSON requests" classname="unit/voice-api-unit.spec.ts" time="0.065">
</testcase>
<testcase name="Voice API Unit Tests › Error Handling › should handle missing request body" classname="unit/voice-api-unit.spec.ts" time="0.057">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should validate environment configuration" classname="unit/voice-api-unit.spec.ts" time="0.045">
</testcase>
<testcase name="Voice API Unit Tests › Configuration Validation › should return integration status" classname="unit/voice-api-unit.spec.ts" time="0.072">
</testcase>
</testsuite>
</testsuites>