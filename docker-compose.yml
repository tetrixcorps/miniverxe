version: '3.8'

services:
  # Main TETRIX Application
  tetrix-app:
    build:
      context: .
      dockerfile: Dockerfile.tetrix
    container_name: tetrix-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
    ports:
      - "8081:8080"  # Direct access for development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - tetrix-network
    depends_on:
      - postgres
      - redis

  # API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: tetrix-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tetrix:${POSTGRES_PASSWORD}@postgres:5432/tetrix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network
    depends_on:
      - postgres
      - redis

  # eSIM Ordering Service
  esim-ordering:
    build:
      context: ./services/esim-ordering
      dockerfile: Dockerfile
    container_name: tetrix-esim
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tetrix:${POSTGRES_PASSWORD}@postgres:5432/tetrix
      - REDIS_URL=redis://redis:6379
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network
    depends_on:
      - postgres
      - redis

  # Phone Provisioning Service
  phone-provisioning:
    build:
      context: ./services/phone-provisioning
      dockerfile: Dockerfile
    container_name: tetrix-phone
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tetrix:${POSTGRES_PASSWORD}@postgres:5432/tetrix
      - REDIS_URL=redis://redis:6379
    ports:
      - "3003:3003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network
    depends_on:
      - postgres
      - redis

  # OAuth Auth Service
  oauth-auth:
    build:
      context: ./services/oauth-auth-service
      dockerfile: Dockerfile
    container_name: tetrix-oauth
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tetrix:${POSTGRES_PASSWORD}@postgres:5432/tetrix
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3004:3004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tetrix-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tetrix
      - POSTGRES_USER=tetrix
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tetrix -d tetrix"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tetrix-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tetrix-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tetrix-nginx
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP (redirects to HTTPS)
      - "443:443"    # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - tetrix-app
      - api
    networks:
      - tetrix-network

  # Log Aggregator (Optional)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: tetrix-logs
    restart: unless-stopped
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - /var/log:/var/log:ro
    networks:
      - tetrix-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tetrix-network:
    driver: bridge