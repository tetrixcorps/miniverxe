// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User and Organization Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        Role     @default(ANNOTATOR)
  status      UserStatus @default(ACTIVE)
  orgId       String?
  walletId    String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  organization Organization? @relation(fields: [orgId], references: [id])
  assignedTasks Task[]
  reviews      Review[]
  analytics    Analytics[]
  billingRecords Billing[]
  wallet       Wallet?
  academyAssignments AcademyAssignment[]
  
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  status      OrgStatus @default(ACTIVE)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  projects    Project[]
  
  @@map("organizations")
}

// Project and Task Models
model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  annotationType  AnnotationType
  guidelineUrl    String?
  dueDate         DateTime?
  status          ProjectStatus @default(DRAFT)
  createdBy       String
  orgId           String
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  organization    Organization @relation(fields: [orgId], references: [id])
  tasks           Task[]
  
  @@map("projects")
}

model Task {
  id              String   @id @default(cuid())
  title           String
  description     String?
  projectId       String
  assignedTo      String?
  status          TaskStatus @default(PENDING)
  annotation      Json?
  priority        TaskPriority @default(MEDIUM)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  submittedAt     DateTime?
  
  // Relations
  project         Project @relation(fields: [projectId], references: [id])
  assignee        User?   @relation(fields: [assignedTo], references: [id])
  reviews         Review[]
  
  @@map("tasks")
}

// Review and Quality Control Models
model Review {
  id              String   @id @default(cuid())
  taskId          String
  reviewerId      String
  status          ReviewStatus
  comments        String?
  rating          Int?     // 1-5 rating
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reviewedAt      DateTime?
  
  // Relations
  task            Task @relation(fields: [taskId], references: [id])
  reviewer        User @relation(fields: [reviewerId], references: [id])
  
  @@map("reviews")
}

// Analytics and Metrics Models
model Analytics {
  id              String   @id @default(cuid())
  userId          String
  projectId       String?
  period          AnalyticsPeriod
  metrics         Json     // Store various metrics as JSON
  
  // Specific metrics
  tasksCompleted  Int?
  approvalRate    Float?
  avgTimeToComplete Float?
  accuracyScore   Float?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id])
  
  @@unique([userId, period, projectId])
  @@map("analytics")
}

// Billing and Payment Models
model Billing {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  currency        String   @default("USD")
  status          BillingStatus
  type            BillingType
  description     String?
  invoiceId       String?
  transactionId   String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processedAt     DateTime?
  
  // Relations
  user            User @relation(fields: [userId], references: [id])
  
  @@map("billing")
}

model Wallet {
  id              String   @id @default(cuid())
  userId          String   @unique
  address         String   @unique
  balance         Float    @default(0)
  currency        String   @default("USD")
  status          WalletStatus @default(ACTIVE)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id])
  
  @@map("wallets")
}

// Contact and Communication Models
model ContactSubmission {
  id              String   @id @default(cuid())
  name            String
  email           String
  subject         String?
  message         String
  status          ContactStatus @default(PENDING)
  response        String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  respondedAt     DateTime?
  
  @@map("contact_submissions")
}

// Academy and Learning Models
model AcademyAssignment {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String?
  content         Json?    // Course content, materials, etc.
  status          AssignmentStatus @default(ASSIGNED)
  progress        Float    @default(0) // 0-100
  score           Float?   // Final score
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?
  
  // Relations
  user            User @relation(fields: [userId], references: [id])
  
  @@map("academy_assignments")
}

// Enums
enum Role {
  ADMIN
  PROJECT_MANAGER
  REVIEWER
  ANNOTATOR
  ACADEMY_STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum BillingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingType {
  PAYMENT
  PAYOUT
  REFUND
  ADJUSTMENT
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  FROZEN
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum AnnotationType {
  IMAGE_CLASSIFICATION
  OBJECT_DETECTION
  TEXT_CLASSIFICATION
  NAMED_ENTITY_RECOGNITION
  SENTIMENT_ANALYSIS
  AUDIO_TRANSCRIPTION
  VIDEO_ANNOTATION
  CUSTOM
}
