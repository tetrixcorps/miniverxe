{
  "info": {
    "name": "TETRIX Cross-Platform Management Services API Tests",
    "description": "Comprehensive API testing for TETRIX and JoRoMi cross-platform management services",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4321",
      "type": "string"
    },
    {
      "key": "localUrl",
      "value": "http://localhost:4321",
      "type": "string"
    },
    {
      "key": "testPhone",
      "value": "+1234567890",
      "type": "string"
    },
    {
      "key": "testSessionId",
      "value": "test_session_123",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "test_cross_platform_secret_key_12345",
      "type": "string"
    },
    {
      "key": "verificationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "industryAuthToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "transcriptionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "callId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status Checks",
      "item": [
        {
          "name": "System Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health/check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health", "check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'degraded', 'unhealthy']);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Basic API Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('API is working');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Performance Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/performance/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["api", "performance", "metrics"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has metrics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('metrics');",
                  "    pm.expect(jsonData.metrics).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Call Management",
      "item": [
        {
          "name": "Initiate Voice Call",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"{{testPhone}}\",\n  \"from\": \"+1987654321\",\n  \"webhookUrl\": \"https://tetrixcorp.com/webhooks/voice\",\n  \"recordCall\": true,\n  \"transcriptionEnabled\": true,\n  \"language\": \"en-US\",\n  \"timeout\": 30,\n  \"maxDuration\": 300\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has sessionId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sessionId');",
                  "    pm.expect(jsonData.sessionId).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has callId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('callId');",
                  "    pm.expect(jsonData.callId).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Active Sessions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "sessions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Session Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/sessions/{{testSessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "sessions", "{{testSessionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "End Call",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"User requested\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/sessions/{{testSessionId}}/end",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "sessions", "{{testSessionId}}", "end"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cleanup Sessions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/cleanup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "cleanup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates success', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Webhooks",
      "item": [
        {
          "name": "Voice Webhook Handler",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event_type\": \"call.answered\",\n  \"data\": {\n    \"call_control_id\": \"test_call_123\",\n    \"call_session_id\": \"{{testSessionId}}\",\n    \"from\": \"+1987654321\",\n    \"to\": \"{{testPhone}}\",\n    \"direction\": \"outbound\",\n    \"state\": \"answered\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/webhook",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "webhook"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "TeXML Response Handler",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"CallSid\": \"test_call_123\",\n  \"From\": \"+1987654321\",\n  \"To\": \"{{testPhone}}\",\n  \"CallStatus\": \"in-progress\",\n  \"Digits\": \"1\",\n  \"SpeechResult\": \"Hello, I need help with my account\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/texml",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "texml"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is XML', function () {",
                  "    pm.expect(pm.response.text()).to.include('<?xml');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/voice/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Transcription",
      "item": [
        {
          "name": "Transcribe Audio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrl\": \"https://example.com/audio/test.wav\",\n  \"sessionId\": \"{{testSessionId}}\",\n  \"language\": \"en-US\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has transcription', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transcription');",
                  "    pm.expect(jsonData.transcription).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transcription",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/{{testSessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "{{testSessionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Batch Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrls\": [\"https://example.com/audio1.wav\", \"https://example.com/audio2.wav\"],\n  \"sessionIds\": [\"session1\", \"session2\"],\n  \"language\": \"en-US\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/batch",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has sessions array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sessions');",
                  "    pm.expect(jsonData.sessions).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Transcription Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has stats', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Transcription Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Demo & Testing",
      "item": [
        {
          "name": "Demo Call",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"{{testPhone}}\",\n  \"scenario\": \"customer_support\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/call",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "call"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo TeXML",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"welcome_message\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/texml",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "texml"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrl\": \"https://example.com/demo.wav\",\n  \"language\": \"en-US\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/transcribe",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "transcribe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo AI Response",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transcription\": \"Hello, I need help with my account\",\n  \"sessionId\": \"{{testSessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/ai-response",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "ai-response"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('response');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo Voice Flow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"full_customer_support\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/voice-flow",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "voice-flow"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Capabilities",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/capabilities",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "capabilities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has capabilities', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('capabilities');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Run All Tests",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/test/all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "test", "all"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Cross-Platform Integration",
      "item": [
        {
          "name": "Initiate Cross-Platform Call",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"{{testPhone}}\",\n  \"platform\": \"tetrix\",\n  \"integrationType\": \"voice\",\n  \"metadata\": {\n    \"userId\": \"user123\",\n    \"conversationId\": \"conv456\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Process Cross-Platform Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionId\": \"{{testSessionId}}\",\n  \"audioUrl\": \"https://example.com/audio.wav\",\n  \"platform\": \"tetrix\",\n  \"language\": \"en-US\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/transcribe",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "transcribe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Cross-Platform Sessions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "sessions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Cross-Platform Session",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/sessions/{{testSessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "sessions", "{{testSessionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Cross-Channel Messages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/sessions/{{testSessionId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "sessions", "{{testSessionId}}", "messages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Session Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\",\n  \"reason\": \"User ended call\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/sessions/{{testSessionId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "sessions", "{{testSessionId}}", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cleanup Cross-Platform Sessions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/cleanup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "cleanup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Integration Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Cross-Platform Integration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/voice/integration/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "integration", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2FA API v2 - Authentication",
      "item": [
        {
          "name": "Initiate 2FA Verification (SMS)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{testPhone}}\",\n  \"method\": \"sms\",\n  \"userAgent\": \"PostmanRuntime/7.32.3\",\n  \"ipAddress\": \"192.168.1.1\",\n  \"sessionId\": \"{{testSessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has verificationId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('verificationId');",
                  "    pm.expect(jsonData.verificationId).to.be.a('string');",
                  "    pm.expect(jsonData.verificationId).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has estimated delivery time', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('estimatedDelivery');",
                  "    pm.expect(jsonData.estimatedDelivery).to.be.a('string');",
                  "});",
                  "",
                  "// Store verificationId for next request",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('verificationId', jsonData.verificationId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Initiate 2FA Verification (Voice)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{testPhone}}\",\n  \"method\": \"voice\",\n  \"userAgent\": \"PostmanRuntime/7.32.3\",\n  \"ipAddress\": \"192.168.1.1\",\n  \"sessionId\": \"{{testSessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has verificationId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('verificationId');",
                  "    pm.expect(jsonData.verificationId).to.be.a('string');",
                  "    pm.expect(jsonData.verificationId).to.not.be.empty;",
                  "});",
                  "",
                  "// Store verificationId for next request",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('verificationId', jsonData.verificationId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify 2FA Code (Valid)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"verificationId\": \"{{verificationId}}\",\n  \"code\": \"123456\",\n  \"phoneNumber\": \"{{testPhone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/verify",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "verify"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has verified property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('verified');",
                  "    pm.expect(jsonData.verified).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has verificationId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('verificationId');",
                  "    pm.expect(jsonData.verificationId).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has phoneNumber', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('phoneNumber');",
                  "    pm.expect(jsonData.phoneNumber).to.equal(pm.collectionVariables.get('testPhone'));",
                  "});",
                  "",
                  "// Store auth token for future requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.token) {",
                  "        pm.collectionVariables.set('authToken', jsonData.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify 2FA Code (Invalid)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"verificationId\": \"{{verificationId}}\",\n  \"code\": \"000000\",\n  \"phoneNumber\": \"{{testPhone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/verify",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "verify"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 for invalid code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success property as false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.be.a('string');",
                  "    pm.expect(jsonData.error).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check 2FA Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/status?verificationId={{verificationId}}&phoneNumber={{testPhone}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "status"],
              "query": [
                {
                  "key": "verificationId",
                  "value": "{{verificationId}}"
                },
                {
                  "key": "phoneNumber",
                  "value": "{{testPhone}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has data object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Data has verificationId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('verificationId');",
                  "    pm.expect(jsonData.data.verificationId).to.equal(pm.collectionVariables.get('verificationId'));",
                  "});",
                  "",
                  "pm.test('Data has status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "    pm.expect(jsonData.data.status).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get 2FA Audit Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/2fa/audit?phoneNumber={{testPhone}}&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "2fa", "audit"],
              "query": [
                {
                  "key": "phoneNumber",
                  "value": "{{testPhone}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has logs array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('logs');",
                  "    pm.expect(jsonData.logs).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Industry Authentication API",
      "item": [
        {
          "name": "Industry Auth - Healthcare",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"industry\": \"healthcare\",\n  \"role\": \"doctor\",\n  \"organization\": \"Test Hospital\",\n  \"phoneNumber\": \"{{testPhone}}\",\n  \"verificationCode\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/industry-auth/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "industry-auth", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has industry data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('industry');",
                  "    pm.expect(jsonData.industry).to.equal('healthcare');",
                  "});",
                  "",
                  "pm.test('Response has role data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(jsonData.role).to.equal('doctor');",
                  "});",
                  "",
                  "pm.test('Response has organization data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('organization');",
                  "    pm.expect(jsonData.organization).to.equal('Test Hospital');",
                  "});",
                  "",
                  "pm.test('Response has auth token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('authToken');",
                  "    pm.expect(jsonData.authToken).to.be.a('string');",
                  "    pm.expect(jsonData.authToken).to.not.be.empty;",
                  "});",
                  "",
                  "// Store auth token for future requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.authToken) {",
                  "        pm.collectionVariables.set('industryAuthToken', jsonData.authToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Industry Auth - Construction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"industry\": \"construction\",\n  \"role\": \"project_manager\",\n  \"organization\": \"Test Construction Co\",\n  \"phoneNumber\": \"{{testPhone}}\",\n  \"verificationCode\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/industry-auth/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "industry-auth", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has industry data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('industry');",
                  "    pm.expect(jsonData.industry).to.equal('construction');",
                  "});",
                  "",
                  "pm.test('Response has role data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(jsonData.role).to.equal('project_manager');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Industry Auth - Invalid Industry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"industry\": \"invalid_industry\",\n  \"role\": \"test_role\",\n  \"organization\": \"Test Org\",\n  \"phoneNumber\": \"{{testPhone}}\",\n  \"verificationCode\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v2/industry-auth/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "industry-auth", "initiate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 for invalid industry', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success property as false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.be.a('string');",
                  "    pm.expect(jsonData.error).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Contact & Communication APIs",
      "item": [
        {
          "name": "Submit Contact Form",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"{{testPhone}}\",\n  \"company\": \"Acme Corp\",\n  \"message\": \"Interested in your services\",\n  \"industry\": \"healthcare\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/contact",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contact"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has contact ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id).to.be.a('string');",
                  "    pm.expect(jsonData.id).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has ticket number', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ticketNumber');",
                  "    pm.expect(jsonData.ticketNumber).to.be.a('string');",
                  "    pm.expect(jsonData.ticketNumber).to.match(/^TKT-\\d{4}-\\d{3}$/);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Contacts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/contacts?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contacts"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has contacts array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('contacts');",
                  "    pm.expect(jsonData.contacts).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validate Phone Number",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{testPhone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/contacts/validate-phone",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contacts", "validate-phone"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has valid property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('valid');",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has formatted phone', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('formatted');",
                  "    pm.expect(jsonData.formatted).to.equal(pm.collectionVariables.get('testPhone'));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Academy & Learning APIs",
      "item": [
        {
          "name": "Get Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/academy/assignments?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "academy", "assignments"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has assignments array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('assignments');",
                  "    pm.expect(jsonData.assignments).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/academy/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "academy", "courses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has courses array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('courses');",
                  "    pm.expect(jsonData.courses).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Leaderboard",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/academy/leaderboard?period=month&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "academy", "leaderboard"],
              "query": [
                {
                  "key": "period",
                  "value": "month"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has leaderboard array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('leaderboard');",
                  "    pm.expect(jsonData.leaderboard).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/academy/progress",
              "host": ["{{baseUrl}}"],
              "path": ["api", "academy", "progress"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has progress object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('progress');",
                  "    pm.expect(jsonData.progress).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Testing & Debug APIs",
      "item": [
        {
          "name": "POST Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test\": \"data\",\n  \"timestamp\": \"2025-01-10T16:30:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has received data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('received');",
                  "    pm.expect(jsonData.received).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Simple Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/simple",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "simple"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Simple test passed');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Debug Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test\": \"debug data\",\n  \"nested\": {\n    \"value\": \"nested data\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/debug-request",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug-request"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has debug object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('debug');",
                  "    pm.expect(jsonData.debug).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Voice API - Transcription Services",
      "item": [
        {
          "name": "Process Audio Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrl\": \"https://recordings.telnyx.com/abc123.wav\",\n  \"language\": \"en-US\",\n  \"model\": \"nova-2\",\n  \"punctuation\": true,\n  \"profanityFilter\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has transcriptionId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transcriptionId');",
                  "    pm.expect(jsonData.transcriptionId).to.be.a('string');",
                  "    pm.expect(jsonData.transcriptionId).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has text', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData.text).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has confidence', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('confidence');",
                  "    pm.expect(jsonData.confidence).to.be.a('number');",
                  "    pm.expect(jsonData.confidence).to.be.at.least(0).and.at.most(1);",
                  "});",
                  "",
                  "// Store transcriptionId for next request",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('transcriptionId', jsonData.transcriptionId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transcription Result",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/{{transcriptionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "{{transcriptionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has transcription object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transcription');",
                  "    pm.expect(jsonData.transcription).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Transcription has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const transcription = jsonData.transcription;",
                  "    pm.expect(transcription).to.have.property('id');",
                  "    pm.expect(transcription).to.have.property('text');",
                  "    pm.expect(transcription).to.have.property('confidence');",
                  "    pm.expect(transcription).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Batch Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrls\": [\n    \"https://recordings.telnyx.com/abc123.wav\",\n    \"https://recordings.telnyx.com/def456.wav\"\n  ],\n  \"language\": \"en-US\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/batch",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "batch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has batchId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('batchId');",
                  "    pm.expect(jsonData.batchId).to.be.a('string');",
                  "    pm.expect(jsonData.batchId).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has transcriptions array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transcriptions');",
                  "    pm.expect(jsonData.transcriptions).to.be.an('array');",
                  "    pm.expect(jsonData.transcriptions).to.have.lengthOf(2);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Transcription Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has stats object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "    pm.expect(jsonData.stats).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Stats has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const stats = jsonData.stats;",
                  "    pm.expect(stats).to.have.property('totalTranscriptions');",
                  "    pm.expect(stats).to.have.property('completedTranscriptions');",
                  "    pm.expect(stats).to.have.property('averageConfidence');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Transcription Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/voice/transcribe/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "transcribe", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'degraded', 'unhealthy']);",
                  "});",
                  "",
                  "pm.test('Response has provider', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('provider');",
                  "    pm.expect(jsonData.provider).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Demo & Capabilities APIs",
      "item": [
        {
          "name": "Demo Call Initiation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"{{testPhone}}\",\n  \"demoType\": \"sales\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/call",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "call"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has demoSessionId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('demoSessionId');",
                  "    pm.expect(jsonData.demoSessionId).to.be.a('string');",
                  "    pm.expect(jsonData.demoSessionId).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response has instructions', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('instructions');",
                  "    pm.expect(jsonData.instructions).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo TeXML Response",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"gather\",\n  \"data\": {\n    \"message\": \"Welcome to TETRIX demo\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/texml",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "texml"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is TwiML XML', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');",
                  "    pm.expect(responseText).to.include('<Response>');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo Transcription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"audioUrl\": \"https://demo-audio.tetrix.com/sample.wav\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/transcribe",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "transcribe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has transcription', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transcription');",
                  "    pm.expect(jsonData.transcription).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has confidence', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('confidence');",
                  "    pm.expect(jsonData.confidence).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Demo AI Response",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello, I need help with billing\",\n  \"context\": \"customer_support\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/ai-response",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "ai-response"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has confidence', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('confidence');",
                  "    pm.expect(jsonData.confidence).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Response has intent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('intent');",
                  "    pm.expect(jsonData.intent).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Demo Capabilities",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/voice/demo/capabilities",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "demo", "capabilities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has capabilities', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('capabilities');",
                  "    pm.expect(jsonData.capabilities).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Response has demoScenarios', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('demoScenarios');",
                  "    pm.expect(jsonData.demoScenarios).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Run All Voice Tests",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/voice/test/all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "test", "all"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has tests array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tests');",
                  "    pm.expect(jsonData.tests).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has test summary', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalTests');",
                  "    pm.expect(jsonData).to.have.property('passedTests');",
                  "    pm.expect(jsonData).to.have.property('failedTests');",
                  "    pm.expect(jsonData).to.have.property('totalDuration');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Webhooks - External Services",
      "item": [
        {
          "name": "Telnyx Voice Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event_type\": \"call.answered\",\n  \"data\": {\n    \"call_control_id\": \"test_call_123\",\n    \"call_session_id\": \"{{testSessionId}}\",\n    \"from\": \"+1987654321\",\n    \"to\": \"{{testPhone}}\",\n    \"direction\": \"outbound\",\n    \"state\": \"answered\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/telnyx/voice",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "telnyx", "voice"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Telnyx SMS Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event_type\": \"message.finalized\",\n  \"data\": {\n    \"id\": \"test_message_123\",\n    \"from\": \"+1987654321\",\n    \"to\": \"{{testPhone}}\",\n    \"text\": \"Your verification code is: 123456\",\n    \"direction\": \"outbound\",\n    \"status\": \"delivered\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/telnyx/sms",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "telnyx", "sms"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Stripe Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Stripe-Signature",
                "value": "test_signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"evt_test_webhook\",\n  \"object\": \"event\",\n  \"type\": \"customer.subscription.created\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"sub_test123\",\n      \"customer\": \"cus_test123\",\n      \"status\": \"active\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/stripe",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "stripe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Sinch Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"conversation_started\",\n  \"timestamp\": \"2025-01-10T21:00:00Z\",\n  \"data\": {\n    \"conversation_id\": \"conv_test123\",\n    \"contact_id\": \"contact_test123\",\n    \"channel\": \"whatsapp\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/sinch",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "sinch"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Checks & Monitoring",
      "item": [
        {
          "name": "Root Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Voice API Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/voice/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "voice", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Endpoint",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test\": \"data\",\n  \"timestamp\": \"2025-01-10T21:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
